
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'nonassocPRINTVARNAMEleftPLUSANDORCOLONNOTEQEQEQrightUNARYSUBNOTCOMMAINTTYPEBOOLTYPELISTTYPEDICTTYPEAND ASSIGN BOOLTYPE COLON COMMA CONST DICTTYPE ELSE EQEQ FALSE IF INPUT INTTYPE IS LCBRACK LISTTYPE LPAREN LSBRACK NOT NOTEQ OR PLUS PRINT RCBRACK RPAREN RSBRACK TRUE UNARYSUB VARNAMEstatement : PRINT expressionstatement : expressionvartype : INTTYPEvartype : BOOLTYPEvartype : LISTTYPEvartype : DICTTYPEtypedef : vartype VARNAMEtypedef : vartype VARNAME LSBRACK vartype RSBRACKtypedef : vartype VARNAME LSBRACK vartype COMMA vartype RSBRACKstatement : typedefstatement : typedef ASSIGN expressionstatement : VARNAME ASSIGN expressionexpression : VARNAMEexpression : CONSTexpression : UNARYSUB expressionexpression : expression PLUS expressionexpression : LPAREN expression RPAREN expression : INPUT LPAREN RPARENkey_datum : expression COLON expressionsubscription : expression LSBRACK expression RSBRACKexpression : TRUEexpression : FALSEexpression : NOT expressionexpression : expression AND expressionexpression : expression OR expressionexpression : expression EQEQ expressionexpression : expression NOTEQ expressionexpression : expression IF expression ELSE expressionexpression : LSBRACK expr_list RSBRACKexpression : LCBRACK key_datum_list RCBRACKexpression : subscriptionexpression : expression IS expressionexpr_list : expressionexpr_list : expr_list : expression COMMA expr_listkey_datum_list : key_datumkey_datum_list : key_datum COMMA key_datum_listkey_datum_list : target : subscriptionstatement : target ASSIGN expression'
    
_lr_action_items = {'DICTTYPE':([0,49,72,],[1,1,1,]),'CONST':([0,4,6,7,13,14,20,22,30,36,38,39,40,41,42,43,44,45,48,51,53,70,],[2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,]),'EQEQ':([2,3,8,11,18,21,23,25,26,28,29,33,34,37,46,47,50,52,54,55,56,57,58,59,60,61,62,63,64,68,69,73,],[-14,-13,-21,-31,-22,40,-13,-31,40,-15,40,40,40,-23,40,-29,40,-30,-17,-18,40,-24,40,-26,40,-27,-16,-25,40,40,-20,40,]),'VARNAME':([0,1,4,5,6,7,12,13,14,15,17,20,22,30,36,38,39,40,41,42,43,44,45,48,51,53,70,],[3,-6,23,27,23,23,-4,23,23,-5,-3,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,]),'LSBRACK':([0,2,3,4,6,7,8,11,13,14,18,20,21,22,23,25,26,27,28,29,30,33,34,36,37,38,39,40,41,42,43,44,45,46,47,48,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,68,69,70,73,],[4,-14,-13,4,4,4,-21,-31,4,4,-22,4,39,4,-13,-31,39,49,-15,39,4,39,39,4,-23,4,4,4,4,4,4,4,4,39,-29,4,39,4,-30,4,-17,-18,39,-24,39,-26,39,-27,-16,-25,39,39,-20,4,39,]),'COLON':([2,8,18,23,25,28,33,37,47,52,54,55,57,59,60,61,62,63,69,73,],[-14,-21,-22,-13,-31,-15,53,-23,-29,-30,-17,-18,-24,-26,-32,-27,-16,-25,-20,-28,]),'INPUT':([0,4,6,7,13,14,20,22,30,36,38,39,40,41,42,43,44,45,48,51,53,70,],[16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,]),'PRINT':([0,],[7,]),'TRUE':([0,4,6,7,13,14,20,22,30,36,38,39,40,41,42,43,44,45,48,51,53,70,],[8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,]),'RPAREN':([2,8,18,23,25,28,34,35,37,47,52,54,55,57,59,60,61,62,63,69,73,],[-14,-21,-22,-13,-31,-15,54,55,-23,-29,-30,-17,-18,-24,-26,-32,-27,-16,-25,-20,-28,]),'RSBRACK':([1,2,4,8,12,15,17,18,23,24,25,26,28,37,47,48,52,54,55,57,58,59,60,61,62,63,65,66,69,73,74,],[-6,-14,-34,-21,-4,-5,-3,-22,-13,47,-31,-33,-15,-23,-29,-34,-30,-17,-18,-24,69,-26,-32,-27,-16,-25,-35,71,-20,-28,75,]),'FALSE':([0,4,6,7,13,14,20,22,30,36,38,39,40,41,42,43,44,45,48,51,53,70,],[18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,]),'NOTEQ':([2,3,8,11,18,21,23,25,26,28,29,33,34,37,46,47,50,52,54,55,56,57,58,59,60,61,62,63,64,68,69,73,],[-14,-13,-21,-31,-22,42,-13,-31,42,-15,42,42,42,-23,42,-29,42,-30,-17,-18,42,-24,42,-26,42,-27,-16,-25,42,42,-20,42,]),'COMMA':([1,2,8,12,15,17,18,23,25,26,28,31,37,47,52,54,55,57,59,60,61,62,63,66,68,69,73,],[-6,-14,-21,-4,-5,-3,-22,-13,-31,48,-15,51,-23,-29,-30,-17,-18,-24,-26,-32,-27,-16,-25,72,-19,-20,-28,]),'PLUS':([2,3,8,11,18,21,23,25,26,28,29,33,34,37,46,47,50,52,54,55,56,57,58,59,60,61,62,63,64,68,69,73,],[-14,-13,-21,-31,-22,43,-13,-31,43,-15,43,43,43,-23,43,-29,43,-30,-17,-18,43,-24,43,-26,43,-27,-16,-25,43,43,-20,43,]),'ASSIGN':([3,9,11,19,27,69,71,75,],[22,30,-39,36,-7,-20,-8,-9,]),'$end':([2,3,8,9,10,11,18,21,23,25,27,28,29,37,46,47,50,52,54,55,56,57,59,60,61,62,63,69,71,73,75,],[-14,-13,-21,-10,0,-31,-22,-2,-13,-31,-7,-15,-1,-23,-12,-29,-11,-30,-17,-18,-40,-24,-26,-32,-27,-16,-25,-20,-8,-28,-9,]),'BOOLTYPE':([0,49,72,],[12,12,12,]),'LCBRACK':([0,4,6,7,13,14,20,22,30,36,38,39,40,41,42,43,44,45,48,51,53,70,],[13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,]),'IS':([2,3,8,11,18,21,23,25,26,28,29,33,34,37,46,47,50,52,54,55,56,57,58,59,60,61,62,63,64,68,69,73,],[-14,-13,-21,-31,-22,41,-13,-31,41,-15,41,41,41,-23,41,-29,41,-30,-17,-18,41,-24,41,-26,41,-27,-16,-25,41,41,-20,41,]),'ELSE':([2,8,18,23,25,28,37,47,52,54,55,57,59,60,61,62,63,64,69,73,],[-14,-21,-22,-13,-31,-15,-23,-29,-30,-17,-18,-24,-26,-32,-27,-16,-25,70,-20,-28,]),'LPAREN':([0,4,6,7,13,14,16,20,22,30,36,38,39,40,41,42,43,44,45,48,51,53,70,],[14,14,14,14,14,14,35,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,]),'LISTTYPE':([0,49,72,],[15,15,15,]),'UNARYSUB':([0,4,6,7,13,14,20,22,30,36,38,39,40,41,42,43,44,45,48,51,53,70,],[6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,]),'IF':([2,3,8,11,18,21,23,25,26,28,29,33,34,37,46,47,50,52,54,55,56,57,58,59,60,61,62,63,64,68,69,73,],[-14,-13,-21,-31,-22,45,-13,-31,45,-15,45,45,45,-23,45,-29,45,-30,-17,-18,45,-24,45,-26,45,-27,-16,-25,45,45,-20,45,]),'AND':([2,3,8,11,18,21,23,25,26,28,29,33,34,37,46,47,50,52,54,55,56,57,58,59,60,61,62,63,64,68,69,73,],[-14,-13,-21,-31,-22,38,-13,-31,38,-15,38,38,38,-23,38,-29,38,-30,-17,-18,38,-24,38,-26,38,-27,-16,-25,38,38,-20,38,]),'INTTYPE':([0,49,72,],[17,17,17,]),'RCBRACK':([2,8,13,18,23,25,28,31,32,37,47,51,52,54,55,57,59,60,61,62,63,67,68,69,73,],[-14,-21,-38,-22,-13,-31,-15,-36,52,-23,-29,-38,-30,-17,-18,-24,-26,-32,-27,-16,-25,-37,-19,-20,-28,]),'NOT':([0,4,6,7,13,14,20,22,30,36,38,39,40,41,42,43,44,45,48,51,53,70,],[20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,]),'OR':([2,3,8,11,18,21,23,25,26,28,29,33,34,37,46,47,50,52,54,55,56,57,58,59,60,61,62,63,64,68,69,73,],[-14,-13,-21,-31,-22,44,-13,-31,44,-15,44,44,44,-23,44,-29,44,-30,-17,-18,44,-24,44,-26,44,-27,-16,-25,44,44,-20,44,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'key_datum':([13,51,],[31,31,]),'typedef':([0,],[9,]),'target':([0,],[19,]),'expr_list':([4,48,],[24,65,]),'key_datum_list':([13,51,],[32,67,]),'vartype':([0,49,72,],[5,66,74,]),'statement':([0,],[10,]),'expression':([0,4,6,7,13,14,20,22,30,36,38,39,40,41,42,43,44,45,48,51,53,70,],[21,26,28,29,33,34,37,46,50,56,57,58,59,60,61,62,63,64,26,33,68,73,]),'subscription':([0,4,6,7,13,14,20,22,30,36,38,39,40,41,42,43,44,45,48,51,53,70,],[11,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> statement","S'",1,None,None,None),
  ('statement -> PRINT expression','statement',2,'p_print_statement','parse.py',132),
  ('statement -> expression','statement',1,'p_discard_statement','parse.py',136),
  ('vartype -> INTTYPE','vartype',1,'p_type_int','parse.py',144),
  ('vartype -> BOOLTYPE','vartype',1,'p_type_bool','parse.py',148),
  ('vartype -> LISTTYPE','vartype',1,'p_type_list','parse.py',152),
  ('vartype -> DICTTYPE','vartype',1,'p_type_dict','parse.py',156),
  ('typedef -> vartype VARNAME','typedef',2,'p_typedef_int_bool','parse.py',160),
  ('typedef -> vartype VARNAME LSBRACK vartype RSBRACK','typedef',5,'p_typedef_list','parse.py',164),
  ('typedef -> vartype VARNAME LSBRACK vartype COMMA vartype RSBRACK','typedef',7,'p_typedef_dict','parse.py',168),
  ('statement -> typedef','statement',1,'p_typedef_statement','parse.py',172),
  ('statement -> typedef ASSIGN expression','statement',3,'p_typedef_assign','parse.py',176),
  ('statement -> VARNAME ASSIGN expression','statement',3,'p_assign_statement','parse.py',180),
  ('expression -> VARNAME','expression',1,'p_varname_expression','parse.py',184),
  ('expression -> CONST','expression',1,'p_int_expression','parse.py',191),
  ('expression -> UNARYSUB expression','expression',2,'p_unarysub_expression','parse.py',195),
  ('expression -> expression PLUS expression','expression',3,'p_plus_expression','parse.py',199),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_group_expression','parse.py',203),
  ('expression -> INPUT LPAREN RPAREN','expression',3,'p_callfunc_expression','parse.py',207),
  ('key_datum -> expression COLON expression','key_datum',3,'p_key_datum','parse.py',216),
  ('subscription -> expression LSBRACK expression RSBRACK','subscription',4,'p_subscription','parse.py',220),
  ('expression -> TRUE','expression',1,'p_true_expression','parse.py',224),
  ('expression -> FALSE','expression',1,'p_false_expression','parse.py',228),
  ('expression -> NOT expression','expression',2,'p_not_expression','parse.py',232),
  ('expression -> expression AND expression','expression',3,'p_and_expression','parse.py',236),
  ('expression -> expression OR expression','expression',3,'p_or_expression','parse.py',240),
  ('expression -> expression EQEQ expression','expression',3,'p_eqeq_expression','parse.py',244),
  ('expression -> expression NOTEQ expression','expression',3,'p_noteq_expression','parse.py',248),
  ('expression -> expression IF expression ELSE expression','expression',5,'p_conditional_expression','parse.py',252),
  ('expression -> LSBRACK expr_list RSBRACK','expression',3,'p_list_expression','parse.py',256),
  ('expression -> LCBRACK key_datum_list RCBRACK','expression',3,'p_dict_expression','parse.py',260),
  ('expression -> subscription','expression',1,'p_subscription_expression','parse.py',264),
  ('expression -> expression IS expression','expression',3,'p_is_expression','parse.py',268),
  ('expr_list -> expression','expr_list',1,'p_expr_list','parse.py',272),
  ('expr_list -> <empty>','expr_list',0,'p_expr_list_empty','parse.py',276),
  ('expr_list -> expression COMMA expr_list','expr_list',3,'p_append_to_list','parse.py',280),
  ('key_datum_list -> key_datum','key_datum_list',1,'p_keydatum_list','parse.py',288),
  ('key_datum_list -> key_datum COMMA key_datum_list','key_datum_list',3,'p_keydatum_list_appendto_list','parse.py',292),
  ('key_datum_list -> <empty>','key_datum_list',0,'p_keydatum_list_empty','parse.py',300),
  ('target -> subscription','target',1,'p_target_subscription','parse.py',309),
  ('statement -> target ASSIGN expression','statement',3,'p_target_statement','parse.py',314),
]
