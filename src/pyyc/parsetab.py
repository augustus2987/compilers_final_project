
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'nonassocPRINTVARNAMEleftPLUSANDORCOLONNOTEQEQEQrightUNARYSUBNOTCOMMAINTTYPEBOOLTYPEAND ASSIGN BOOLTYPE COLON COMMA CONST ELSE EQEQ FALSE IF INPUT INTTYPE IS LCBRACK LPAREN LSBRACK NOT NOTEQ OR PLUS PRINT RCBRACK RPAREN RSBRACK TRUE UNARYSUB VARNAMEstatement : PRINT expressionstatement : expressionvartype : INTTYPEvartype : BOOLTYPEtypedef : vartype VARNAMEstatement : typedef ASSIGN expressionstatement : VARNAME ASSIGN expressionexpression : VARNAMEexpression : CONSTexpression : UNARYSUB expressionexpression : expression PLUS expressionexpression : LPAREN expression RPAREN expression : INPUT LPAREN RPARENkey_datum : expression COLON expressionsubscription : expression LSBRACK expression RSBRACKexpression : TRUEexpression : FALSEexpression : NOT expressionexpression : expression AND expressionexpression : expression OR expressionexpression : expression EQEQ expressionexpression : expression NOTEQ expressionexpression : expression IF expression ELSE expressionexpression : LSBRACK expr_list RSBRACKexpression : LCBRACK key_datum_list RCBRACKexpression : subscriptionexpression : expression IS expressionexpr_list : expressionexpr_list : expression COMMA expr_listkey_datum_list : key_datumkey_datum_list : key_datum COMMA key_datum_listtarget : subscriptionstatement : target ASSIGN expression'
    
_lr_action_items = {'CONST':([0,3,5,6,12,13,18,20,28,34,36,37,38,39,40,41,42,43,46,48,50,66,],[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,]),'EQEQ':([1,2,7,10,16,19,21,23,24,26,27,31,32,35,44,45,47,49,51,52,53,54,55,56,57,58,59,60,61,64,65,67,],[-9,-8,-16,-26,-17,38,-8,-26,38,-10,38,38,38,-18,38,-24,38,-25,-12,-13,38,-19,38,-21,38,-22,-11,-20,38,38,-15,38,]),'VARNAME':([0,3,4,5,6,11,12,13,15,18,20,28,34,36,37,38,39,40,41,42,43,46,48,50,66,],[2,21,25,21,21,-4,21,21,-3,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,]),'LSBRACK':([0,1,2,3,5,6,7,10,12,13,16,18,19,20,21,23,24,26,27,28,31,32,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,64,65,66,67,],[3,-9,-8,3,3,3,-16,-26,3,3,-17,3,37,3,-8,-26,37,-10,37,3,37,37,3,-18,3,3,3,3,3,3,3,3,37,-24,3,37,3,-25,3,-12,-13,37,-19,37,-21,37,-22,-11,-20,37,37,-15,3,37,]),'INPUT':([0,3,5,6,12,13,18,20,28,34,36,37,38,39,40,41,42,43,46,48,50,66,],[14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,]),'PRINT':([0,],[6,]),'TRUE':([0,3,5,6,12,13,18,20,28,34,36,37,38,39,40,41,42,43,46,48,50,66,],[7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,]),'RPAREN':([1,7,16,21,23,26,32,33,35,45,49,51,52,54,56,57,58,59,60,65,67,],[-9,-16,-17,-8,-26,-10,51,52,-18,-24,-25,-12,-13,-19,-21,-27,-22,-11,-20,-15,-23,]),'RSBRACK':([1,7,16,21,22,23,24,26,35,45,49,51,52,54,55,56,57,58,59,60,62,65,67,],[-9,-16,-17,-8,45,-26,-28,-10,-18,-24,-25,-12,-13,-19,65,-21,-27,-22,-11,-20,-29,-15,-23,]),'NOTEQ':([1,2,7,10,16,19,21,23,24,26,27,31,32,35,44,45,47,49,51,52,53,54,55,56,57,58,59,60,61,64,65,67,],[-9,-8,-16,-26,-17,40,-8,-26,40,-10,40,40,40,-18,40,-24,40,-25,-12,-13,40,-19,40,-21,40,-22,-11,-20,40,40,-15,40,]),'PLUS':([1,2,7,10,16,19,21,23,24,26,27,31,32,35,44,45,47,49,51,52,53,54,55,56,57,58,59,60,61,64,65,67,],[-9,-8,-16,-26,-17,41,-8,-26,41,-10,41,41,41,-18,41,-24,41,-25,-12,-13,41,-19,41,-21,41,-22,-11,-20,41,41,-15,41,]),'COLON':([1,7,16,21,23,26,31,35,45,49,51,52,54,56,57,58,59,60,65,67,],[-9,-16,-17,-8,-26,-10,50,-18,-24,-25,-12,-13,-19,-21,-27,-22,-11,-20,-15,-23,]),'ASSIGN':([2,8,10,17,25,65,],[20,28,-32,34,-5,-15,]),'$end':([1,2,7,9,10,16,19,21,23,26,27,35,44,45,47,49,51,52,53,54,56,57,58,59,60,65,67,],[-9,-8,-16,0,-26,-17,-2,-8,-26,-10,-1,-18,-7,-24,-6,-25,-12,-13,-33,-19,-21,-27,-22,-11,-20,-15,-23,]),'BOOLTYPE':([0,],[11,]),'LCBRACK':([0,3,5,6,12,13,18,20,28,34,36,37,38,39,40,41,42,43,46,48,50,66,],[12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,]),'IS':([1,2,7,10,16,19,21,23,24,26,27,31,32,35,44,45,47,49,51,52,53,54,55,56,57,58,59,60,61,64,65,67,],[-9,-8,-16,-26,-17,39,-8,-26,39,-10,39,39,39,-18,39,-24,39,-25,-12,-13,39,-19,39,-21,39,-22,-11,-20,39,39,-15,39,]),'ELSE':([1,7,16,21,23,26,35,45,49,51,52,54,56,57,58,59,60,61,65,67,],[-9,-16,-17,-8,-26,-10,-18,-24,-25,-12,-13,-19,-21,-27,-22,-11,-20,66,-15,-23,]),'LPAREN':([0,3,5,6,12,13,14,18,20,28,34,36,37,38,39,40,41,42,43,46,48,50,66,],[13,13,13,13,13,13,33,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,]),'UNARYSUB':([0,3,5,6,12,13,18,20,28,34,36,37,38,39,40,41,42,43,46,48,50,66,],[5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,]),'IF':([1,2,7,10,16,19,21,23,24,26,27,31,32,35,44,45,47,49,51,52,53,54,55,56,57,58,59,60,61,64,65,67,],[-9,-8,-16,-26,-17,43,-8,-26,43,-10,43,43,43,-18,43,-24,43,-25,-12,-13,43,-19,43,-21,43,-22,-11,-20,43,43,-15,43,]),'AND':([1,2,7,10,16,19,21,23,24,26,27,31,32,35,44,45,47,49,51,52,53,54,55,56,57,58,59,60,61,64,65,67,],[-9,-8,-16,-26,-17,36,-8,-26,36,-10,36,36,36,-18,36,-24,36,-25,-12,-13,36,-19,36,-21,36,-22,-11,-20,36,36,-15,36,]),'FALSE':([0,3,5,6,12,13,18,20,28,34,36,37,38,39,40,41,42,43,46,48,50,66,],[16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,]),'OR':([1,2,7,10,16,19,21,23,24,26,27,31,32,35,44,45,47,49,51,52,53,54,55,56,57,58,59,60,61,64,65,67,],[-9,-8,-16,-26,-17,42,-8,-26,42,-10,42,42,42,-18,42,-24,42,-25,-12,-13,42,-19,42,-21,42,-22,-11,-20,42,42,-15,42,]),'RCBRACK':([1,7,16,21,23,26,29,30,35,45,49,51,52,54,56,57,58,59,60,63,64,65,67,],[-9,-16,-17,-8,-26,-10,-30,49,-18,-24,-25,-12,-13,-19,-21,-27,-22,-11,-20,-31,-14,-15,-23,]),'NOT':([0,3,5,6,12,13,18,20,28,34,36,37,38,39,40,41,42,43,46,48,50,66,],[18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,]),'COMMA':([1,7,16,21,23,24,26,29,35,45,49,51,52,54,56,57,58,59,60,64,65,67,],[-9,-16,-17,-8,-26,46,-10,48,-18,-24,-25,-12,-13,-19,-21,-27,-22,-11,-20,-14,-15,-23,]),'INTTYPE':([0,],[15,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'key_datum':([12,48,],[29,29,]),'typedef':([0,],[8,]),'target':([0,],[17,]),'expr_list':([3,46,],[22,62,]),'key_datum_list':([12,48,],[30,63,]),'vartype':([0,],[4,]),'statement':([0,],[9,]),'expression':([0,3,5,6,12,13,18,20,28,34,36,37,38,39,40,41,42,43,46,48,50,66,],[19,24,26,27,31,32,35,44,47,53,54,55,56,57,58,59,60,61,24,31,64,67,]),'subscription':([0,3,5,6,12,13,18,20,28,34,36,37,38,39,40,41,42,43,46,48,50,66,],[10,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> statement","S'",1,None,None,None),
  ('statement -> PRINT expression','statement',2,'p_print_statement','parse.py',192),
  ('statement -> expression','statement',1,'p_discard_statement','parse.py',196),
  ('vartype -> INTTYPE','vartype',1,'p_type_int','parse.py',204),
  ('vartype -> BOOLTYPE','vartype',1,'p_type_bool','parse.py',208),
  ('typedef -> vartype VARNAME','typedef',2,'p_typedef','parse.py',212),
  ('statement -> typedef ASSIGN expression','statement',3,'p_typedef_assign','parse.py',216),
  ('statement -> VARNAME ASSIGN expression','statement',3,'p_assign_statement','parse.py',220),
  ('expression -> VARNAME','expression',1,'p_varname_expression','parse.py',224),
  ('expression -> CONST','expression',1,'p_int_expression','parse.py',232),
  ('expression -> UNARYSUB expression','expression',2,'p_unarysub_expression','parse.py',236),
  ('expression -> expression PLUS expression','expression',3,'p_plus_expression','parse.py',240),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_group_expression','parse.py',244),
  ('expression -> INPUT LPAREN RPAREN','expression',3,'p_callfunc_expression','parse.py',248),
  ('key_datum -> expression COLON expression','key_datum',3,'p_key_datum','parse.py',257),
  ('subscription -> expression LSBRACK expression RSBRACK','subscription',4,'p_subscription','parse.py',261),
  ('expression -> TRUE','expression',1,'p_true_expression','parse.py',265),
  ('expression -> FALSE','expression',1,'p_false_expression','parse.py',269),
  ('expression -> NOT expression','expression',2,'p_not_expression','parse.py',273),
  ('expression -> expression AND expression','expression',3,'p_and_expression','parse.py',277),
  ('expression -> expression OR expression','expression',3,'p_or_expression','parse.py',281),
  ('expression -> expression EQEQ expression','expression',3,'p_eqeq_expression','parse.py',285),
  ('expression -> expression NOTEQ expression','expression',3,'p_noteq_expression','parse.py',289),
  ('expression -> expression IF expression ELSE expression','expression',5,'p_conditional_expression','parse.py',293),
  ('expression -> LSBRACK expr_list RSBRACK','expression',3,'p_list_expression','parse.py',297),
  ('expression -> LCBRACK key_datum_list RCBRACK','expression',3,'p_dict_expression','parse.py',301),
  ('expression -> subscription','expression',1,'p_subscription_expression','parse.py',305),
  ('expression -> expression IS expression','expression',3,'p_is_expression','parse.py',309),
  ('expr_list -> expression','expr_list',1,'p_expr_list','parse.py',313),
  ('expr_list -> expression COMMA expr_list','expr_list',3,'p_append_to_list','parse.py',317),
  ('key_datum_list -> key_datum','key_datum_list',1,'p_keydatum_list','parse.py',325),
  ('key_datum_list -> key_datum COMMA key_datum_list','key_datum_list',3,'p_keydatum_list_appendto_list','parse.py',329),
  ('target -> subscription','target',1,'p_target_subscription','parse.py',342),
  ('statement -> target ASSIGN expression','statement',3,'p_target_statement','parse.py',347),
]
