compiler:: base tree:
compiler::	Assign([AssName('x', 'OP_ASSIGN')], List([Const(1), Const(2), Const(3)]))
compiler::	Printnl([Compare(Name('x'), [('is', List([Const(1), Const(2), Const(3)]))])], None)
explicate:: Explicated Tree:
Module(None, Stmt([Assign([AssName('x', 'OP_ASSIGN')], List([Const(1), Const(2), Const(3)])), Let(Name('expl_3'), Let(Name('expl_1'), Name('x'), Let(Name('expl_2'), List([Const(1), Const(2), Const(3)]), IfExp(InjectFrom(bool, And([Or([Compare(Const(0), [('==', GetTag(Name('expl_1')))]), Compare(Const(1), [('==', GetTag(Name('expl_1')))])]), Or([Compare(Const(0), [('==', GetTag(Name('expl_2')))]), Compare(Const(1), [('==', GetTag(Name('expl_2')))])])])), Assign([Name('expl_0')], IfExp(InjectFrom(bool, Compare(GetTag(Name('expl_1')), [('==', GetTag(Name('expl_2')))])), InjectFrom(bool, Compare(IfExp(InjectFrom(bool, Compare(Const(0), [('==', GetTag(Name('expl_1')))])), ProjectTo(int, Name('expl_1')), ProjectTo(bool, Name('expl_1'))), [('==', IfExp(InjectFrom(bool, Compare(Const(0), [('==', GetTag(Name('expl_2')))])), ProjectTo(int, Name('expl_2')), ProjectTo(bool, Name('expl_2'))))])), Bool(False))), IfExp(InjectFrom(bool, And([Compare(Const(3), [('==', GetTag(Name('expl_1')))]), Compare(Const(3), [('==', GetTag(Name('expl_2')))])])), Assign([Name('expl_0')], InjectFrom(bool, Compare(Name('x'), [('==', List([Const(1), Const(2), Const(3)]))]))), CallFunc(Name('call_error'), [], None, None))))), IfExp(InjectFrom(bool, Compare(Const(0), [('==', GetTag(Name('expl_3')))])), Printnl([ProjectTo(int, Name('expl_3'))], None), IfExp(InjectFrom(bool, Compare(Const(1), [('==', GetTag(Name('expl_3')))])), PrintBool(Name('expl_3')), IfExp(InjectFrom(bool, Compare(Const(3), [('==', GetTag(Name('expl_3')))])), PrintBig(Name('expl_3')), CallFunc(Name('call_error'), [], None, None)))))]))
Flatten:: Flattened AST tree:
Flatten:: 	Assign([AssName('var_0', 'OP-ASSIGN')], List([Const(1), Const(2), Const(3)]))
Flatten:: 	Assign([AssName('user_x', 'OP_ASSIGN')], Name('var_0'))
Flatten:: 	Let(Name('expl_1'), Name('user_x'), Stmt([Assign([AssName('var_1', 'OP-ASSIGN')], List([Const(1), Const(2), Const(3)])), Let(Name('expl_2'), Name('var_1'), Stmt([Assign([AssName('var_56', 'OP-ASSIGN')], GetTag(Name('expl_1'))), Assign([AssName('var_55', 'OP-ASSIGN')], Compare(Const(0), [('==', Name('var_56'))])), Assign([AssName('var_59', 'OP-ASSIGN')], GetTag(Name('expl_1'))), Assign([AssName('var_58', 'OP-ASSIGN')], Compare(Const(1), [('==', Name('var_59'))])), Assign([AssName('var_54', 'OP-ASSIGN')], Or([Name('var_55'), Name('var_58')])), Assign([AssName('var_64', 'OP-ASSIGN')], GetTag(Name('expl_2'))), Assign([AssName('var_63', 'OP-ASSIGN')], Compare(Const(0), [('==', Name('var_64'))])), Assign([AssName('var_67', 'OP-ASSIGN')], GetTag(Name('expl_2'))), Assign([AssName('var_66', 'OP-ASSIGN')], Compare(Const(1), [('==', Name('var_67'))])), Assign([AssName('var_62', 'OP-ASSIGN')], Or([Name('var_63'), Name('var_66')])), Assign([AssName('var_53', 'OP-ASSIGN')], And([Name('var_54'), Name('var_62')])), Assign([AssName('var_52', 'OP-ASSIGN')], InjectFrom(bool, Name('var_53'))), Assign([AssName('var_72', 'OP-ASSIGN')], GetTag(Name('var_52'))), Assign([AssName('var_72', 'OP-ASSIGN')], Compare(Const(0), [('==', Name('var_72'))])), IfExp(Name('var_72'), Stmt([Assign([AssName('var_52', 'OP-ASSIGN')], ProjectTo(int, Name('var_52')))]), Stmt([Assign([AssName('var_52', 'OP-ASSIGN')], ProjectTo(bool, Name('var_52')))])), IfExp(Name('var_52'), Stmt([Assign([AssName('var_29', 'OP-ASSIGN')], GetTag(Name('expl_1'))), Assign([AssName('var_30', 'OP-ASSIGN')], GetTag(Name('expl_2'))), Assign([AssName('var_28', 'OP-ASSIGN')], Compare(Name('var_29'), [('==', Name('var_30'))])), Assign([AssName('var_27', 'OP-ASSIGN')], InjectFrom(bool, Name('var_28'))), Assign([AssName('var_33', 'OP-ASSIGN')], GetTag(Name('var_27'))), Assign([AssName('var_33', 'OP-ASSIGN')], Compare(Const(0), [('==', Name('var_33'))])), IfExp(Name('var_33'), Stmt([Assign([AssName('var_27', 'OP-ASSIGN')], ProjectTo(int, Name('var_27')))]), Stmt([Assign([AssName('var_27', 'OP-ASSIGN')], ProjectTo(bool, Name('var_27')))])), IfExp(Name('var_27'), Stmt([Assign([AssName('var_10', 'OP-ASSIGN')], GetTag(Name('expl_1'))), Assign([AssName('var_9', 'OP-ASSIGN')], Compare(Const(0), [('==', Name('var_10'))])), Assign([AssName('var_8', 'OP-ASSIGN')], InjectFrom(bool, Name('var_9'))), Assign([AssName('var_13', 'OP-ASSIGN')], GetTag(Name('var_8'))), Assign([AssName('var_13', 'OP-ASSIGN')], Compare(Const(0), [('==', Name('var_13'))])), IfExp(Name('var_13'), Stmt([Assign([AssName('var_8', 'OP-ASSIGN')], ProjectTo(int, Name('var_8')))]), Stmt([Assign([AssName('var_8', 'OP-ASSIGN')], ProjectTo(bool, Name('var_8')))])), IfExp(Name('var_8'), Stmt([Assign([AssName('var_5', 'OP-ASSIGN')], ProjectTo(int, Name('expl_1'))), Assign([AssName('var_5', 'OP-ASSIGN')], Name('var_5'))]), Stmt([Assign([AssName('var_6', 'OP-ASSIGN')], ProjectTo(bool, Name('expl_1'))), Assign([AssName('var_5', 'OP-ASSIGN')], Name('var_6'))])), Assign([AssName('var_20', 'OP-ASSIGN')], GetTag(Name('expl_2'))), Assign([AssName('var_19', 'OP-ASSIGN')], Compare(Const(0), [('==', Name('var_20'))])), Assign([AssName('var_18', 'OP-ASSIGN')], InjectFrom(bool, Name('var_19'))), Assign([AssName('var_23', 'OP-ASSIGN')], GetTag(Name('var_18'))), Assign([AssName('var_23', 'OP-ASSIGN')], Compare(Const(0), [('==', Name('var_23'))])), IfExp(Name('var_23'), Stmt([Assign([AssName('var_18', 'OP-ASSIGN')], ProjectTo(int, Name('var_18')))]), Stmt([Assign([AssName('var_18', 'OP-ASSIGN')], ProjectTo(bool, Name('var_18')))])), IfExp(Name('var_18'), Stmt([Assign([AssName('var_15', 'OP-ASSIGN')], ProjectTo(int, Name('expl_2'))), Assign([AssName('var_15', 'OP-ASSIGN')], Name('var_15'))]), Stmt([Assign([AssName('var_16', 'OP-ASSIGN')], ProjectTo(bool, Name('expl_2'))), Assign([AssName('var_15', 'OP-ASSIGN')], Name('var_16'))])), Assign([AssName('var_4', 'OP-ASSIGN')], Compare(Name('var_5'), [('==', Name('var_15'))])), Assign([AssName('var_3', 'OP-ASSIGN')], InjectFrom(bool, Name('var_4'))), Assign([AssName('var_3', 'OP-ASSIGN')], Name('var_3'))]), Stmt([Assign([AssName('var_26', 'OP-ASSIGN')], Bool(False)), Assign([AssName('var_3', 'OP-ASSIGN')], Name('var_26'))])), Assign([Name('expl_0')], Name('var_3')), Assign([AssName('var_3', 'OP-ASSIGN')], Name('expl_0'))]), Stmt([Assign([AssName('var_43', 'OP-ASSIGN')], GetTag(Name('expl_1'))), Assign([AssName('var_42', 'OP-ASSIGN')], Compare(Const(3), [('==', Name('var_43'))])), Assign([AssName('var_46', 'OP-ASSIGN')], GetTag(Name('expl_2'))), Assign([AssName('var_45', 'OP-ASSIGN')], Compare(Const(3), [('==', Name('var_46'))])), Assign([AssName('var_41', 'OP-ASSIGN')], And([Name('var_42'), Name('var_45')])), Assign([AssName('var_40', 'OP-ASSIGN')], InjectFrom(bool, Name('var_41'))), Assign([AssName('var_50', 'OP-ASSIGN')], GetTag(Name('var_40'))), Assign([AssName('var_50', 'OP-ASSIGN')], Compare(Const(0), [('==', Name('var_50'))])), IfExp(Name('var_50'), Stmt([Assign([AssName('var_40', 'OP-ASSIGN')], ProjectTo(int, Name('var_40')))]), Stmt([Assign([AssName('var_40', 'OP-ASSIGN')], ProjectTo(bool, Name('var_40')))])), IfExp(Name('var_40'), Stmt([Assign([AssName('var_36', 'OP-ASSIGN')], List([Const(1), Const(2), Const(3)])), Assign([AssName('var_35', 'OP-ASSIGN')], Compare(Name('user_x'), [('==', Name('var_36'))])), Assign([AssName('var_34', 'OP-ASSIGN')], InjectFrom(bool, Name('var_35'))), Assign([Name('expl_0')], Name('var_34')), Assign([AssName('var_34', 'OP-ASSIGN')], Name('expl_0')), Assign([AssName('var_3', 'OP-ASSIGN')], Name('var_34'))]), Stmt([Assign([AssName('var_39', 'OP-ASSIGN')], CallFunc(Name('call_error'), [], None, None)), Assign([AssName('var_34', 'OP-ASSIGN')], Name('var_39')), Assign([AssName('var_3', 'OP-ASSIGN')], Name('var_34'))]))]))])), Assign([AssName('var_1', 'OP-ASSIGN')], Name('expl_0'))]))
Flatten:: 	Assign([AssName('var_1', 'OP-ASSIGN')], Name('expl_0'))
Flatten:: 	Let(Name('expl_3'), Name('var_1'), Stmt([Assign([AssName('var_92', 'OP-ASSIGN')], GetTag(Name('expl_3'))), Assign([AssName('var_91', 'OP-ASSIGN')], Compare(Const(0), [('==', Name('var_92'))])), Assign([AssName('var_90', 'OP-ASSIGN')], InjectFrom(bool, Name('var_91'))), Assign([AssName('var_95', 'OP-ASSIGN')], GetTag(Name('var_90'))), Assign([AssName('var_95', 'OP-ASSIGN')], Compare(Const(0), [('==', Name('var_95'))])), IfExp(Name('var_95'), Stmt([Assign([AssName('var_90', 'OP-ASSIGN')], ProjectTo(int, Name('var_90')))]), Stmt([Assign([AssName('var_90', 'OP-ASSIGN')], ProjectTo(bool, Name('var_90')))])), IfExp(Name('var_90'), Stmt([Assign([AssName('var_74', 'OP-ASSIGN')], ProjectTo(int, Name('expl_3'))), Printnl([Name('var_74')], None)]), Stmt([Assign([AssName('var_85', 'OP-ASSIGN')], GetTag(Name('expl_3'))), Assign([AssName('var_84', 'OP-ASSIGN')], Compare(Const(1), [('==', Name('var_85'))])), Assign([AssName('var_83', 'OP-ASSIGN')], InjectFrom(bool, Name('var_84'))), Assign([AssName('var_88', 'OP-ASSIGN')], GetTag(Name('var_83'))), Assign([AssName('var_88', 'OP-ASSIGN')], Compare(Const(0), [('==', Name('var_88'))])), IfExp(Name('var_88'), Stmt([Assign([AssName('var_83', 'OP-ASSIGN')], ProjectTo(int, Name('var_83')))]), Stmt([Assign([AssName('var_83', 'OP-ASSIGN')], ProjectTo(bool, Name('var_83')))])), IfExp(Name('var_83'), Stmt([PrintBool(Name('expl_3'))]), Stmt([Assign([AssName('var_78', 'OP-ASSIGN')], GetTag(Name('expl_3'))), Assign([AssName('var_77', 'OP-ASSIGN')], Compare(Const(3), [('==', Name('var_78'))])), Assign([AssName('var_76', 'OP-ASSIGN')], InjectFrom(bool, Name('var_77'))), Assign([AssName('var_81', 'OP-ASSIGN')], GetTag(Name('var_76'))), Assign([AssName('var_81', 'OP-ASSIGN')], Compare(Const(0), [('==', Name('var_81'))])), IfExp(Name('var_81'), Stmt([Assign([AssName('var_76', 'OP-ASSIGN')], ProjectTo(int, Name('var_76')))]), Stmt([Assign([AssName('var_76', 'OP-ASSIGN')], ProjectTo(bool, Name('var_76')))])), IfExp(Name('var_76'), Stmt([PrintBig(Name('expl_3'))]), Stmt([Assign([AssName('var_75', 'OP-ASSIGN')], CallFunc(Name('call_error'), [], None, None)), Assign([AssName('var_75', 'OP-ASSIGN')], Name('var_75')), Assign([AssName('var_75', 'OP-ASSIGN')], Name('var_75'))]))]))]))]))
x86IR::  Intermediate representation:
x86IR::  	pushl $3
x86IR::  	call inject_int
x86IR::  	pushl eax
x86IR::  	call create_list
x86IR::  	pushl eax
x86IR::  	call inject_big
x86IR::  	movl eax var_0
x86IR::  	pushl $0
x86IR::  	call inject_int
x86IR::  	movl eax ebx
x86IR::  	pushl $1
x86IR::  	call inject_int
x86IR::  	pushl eax
x86IR::  	pushl ebx
x86IR::  	pushl var_0
x86IR::  	call set_subscript
x86IR::  	pushl $1
x86IR::  	call inject_int
x86IR::  	movl eax ebx
x86IR::  	pushl $2
x86IR::  	call inject_int
x86IR::  	pushl eax
x86IR::  	pushl ebx
x86IR::  	pushl var_0
x86IR::  	call set_subscript
x86IR::  	pushl $2
x86IR::  	call inject_int
x86IR::  	movl eax ebx
x86IR::  	pushl $3
x86IR::  	call inject_int
x86IR::  	pushl eax
x86IR::  	pushl ebx
x86IR::  	pushl var_0
x86IR::  	call set_subscript
x86IR::  	movl var_0 user_x
x86IR::  	movl user_x expl_1
x86IR::  	pushl $3
x86IR::  	call inject_int
x86IR::  	pushl eax
x86IR::  	call create_list
x86IR::  	pushl eax
x86IR::  	call inject_big
x86IR::  	movl eax var_1
x86IR::  	pushl $0
x86IR::  	call inject_int
x86IR::  	movl eax ebx
x86IR::  	pushl $1
x86IR::  	call inject_int
x86IR::  	pushl eax
x86IR::  	pushl ebx
x86IR::  	pushl var_1
x86IR::  	call set_subscript
x86IR::  	pushl $1
x86IR::  	call inject_int
x86IR::  	movl eax ebx
x86IR::  	pushl $2
x86IR::  	call inject_int
x86IR::  	pushl eax
x86IR::  	pushl ebx
x86IR::  	pushl var_1
x86IR::  	call set_subscript
x86IR::  	pushl $2
x86IR::  	call inject_int
x86IR::  	movl eax ebx
x86IR::  	pushl $3
x86IR::  	call inject_int
x86IR::  	pushl eax
x86IR::  	pushl ebx
x86IR::  	pushl var_1
x86IR::  	call set_subscript
x86IR::  	movl var_1 expl_2
x86IR::  	pushl expl_1
x86IR::  	call tag
x86IR::  	movl eax var_56
x86IR::  	cmpl $0 var_56
x86IR::  	je ir_tag0_cmp
x86IR::  	movl $0 var_55
x86IR::  	jmp ir_tag0_cmpend
x86IR::  	ir_tag0_cmp:
x86IR::  	movl $1 var_55
x86IR::  	ir_tag0_cmpend:
x86IR::  	pushl expl_1
x86IR::  	call tag
x86IR::  	movl eax var_59
x86IR::  	cmpl $1 var_59
x86IR::  	je ir_tag1_cmp
x86IR::  	movl $0 var_58
x86IR::  	jmp ir_tag1_cmpend
x86IR::  	ir_tag1_cmp:
x86IR::  	movl $1 var_58
x86IR::  	ir_tag1_cmpend:
x86IR::  	movl var_55 var_54
x86IR::  	orl var_58 var_54
x86IR::  	pushl expl_2
x86IR::  	call tag
x86IR::  	movl eax var_64
x86IR::  	cmpl $0 var_64
x86IR::  	je ir_tag2_cmp
x86IR::  	movl $0 var_63
x86IR::  	jmp ir_tag2_cmpend
x86IR::  	ir_tag2_cmp:
x86IR::  	movl $1 var_63
x86IR::  	ir_tag2_cmpend:
x86IR::  	pushl expl_2
x86IR::  	call tag
x86IR::  	movl eax var_67
x86IR::  	cmpl $1 var_67
x86IR::  	je ir_tag3_cmp
x86IR::  	movl $0 var_66
x86IR::  	jmp ir_tag3_cmpend
x86IR::  	ir_tag3_cmp:
x86IR::  	movl $1 var_66
x86IR::  	ir_tag3_cmpend:
x86IR::  	movl var_63 var_62
x86IR::  	orl var_66 var_62
x86IR::  	movl var_54 var_53
x86IR::  	andl var_62 var_53
x86IR::  	pushl var_53
x86IR::  	call inject_bool
x86IR::  	movl eax var_52
x86IR::  	pushl var_52
x86IR::  	call tag
x86IR::  	movl eax var_72
x86IR::  	cmpl $0 var_72
x86IR::  	je ir_tag4_cmp
x86IR::  	movl $0 var_72
x86IR::  	jmp ir_tag4_cmpend
x86IR::  	ir_tag4_cmp:
x86IR::  	movl $1 var_72
x86IR::  	ir_tag4_cmpend:
x86IR::  	cmpl $0 var_72
x86IR::  	je ir_tag_else_5
x86IR::  	pushl var_52
x86IR::  	call project_int
x86IR::  	movl eax var_52
x86IR::  	jmp ir_tag_end_5
x86IR::  	ir_tag_else_5:
x86IR::  	pushl var_52
x86IR::  	call project_bool
x86IR::  	movl eax var_52
x86IR::  	jmp ir_tag_end_5
x86IR::  	ir_tag_end_5:
x86IR::  	cmpl $0 var_52
x86IR::  	je ir_tag_else_6
x86IR::  	pushl expl_1
x86IR::  	call tag
x86IR::  	movl eax var_29
x86IR::  	pushl expl_2
x86IR::  	call tag
x86IR::  	movl eax var_30
x86IR::  	cmpl var_29 var_30
x86IR::  	je ir_tag7_cmp
x86IR::  	movl $0 var_28
x86IR::  	jmp ir_tag7_cmpend
x86IR::  	ir_tag7_cmp:
x86IR::  	movl $1 var_28
x86IR::  	ir_tag7_cmpend:
x86IR::  	pushl var_28
x86IR::  	call inject_bool
x86IR::  	movl eax var_27
x86IR::  	pushl var_27
x86IR::  	call tag
x86IR::  	movl eax var_33
x86IR::  	cmpl $0 var_33
x86IR::  	je ir_tag8_cmp
x86IR::  	movl $0 var_33
x86IR::  	jmp ir_tag8_cmpend
x86IR::  	ir_tag8_cmp:
x86IR::  	movl $1 var_33
x86IR::  	ir_tag8_cmpend:
x86IR::  	cmpl $0 var_33
x86IR::  	je ir_tag_else_9
x86IR::  	pushl var_27
x86IR::  	call project_int
x86IR::  	movl eax var_27
x86IR::  	jmp ir_tag_end_9
x86IR::  	ir_tag_else_9:
x86IR::  	pushl var_27
x86IR::  	call project_bool
x86IR::  	movl eax var_27
x86IR::  	jmp ir_tag_end_9
x86IR::  	ir_tag_end_9:
x86IR::  	cmpl $0 var_27
x86IR::  	je ir_tag_else_10
x86IR::  	pushl expl_1
x86IR::  	call tag
x86IR::  	movl eax var_10
x86IR::  	cmpl $0 var_10
x86IR::  	je ir_tag11_cmp
x86IR::  	movl $0 var_9
x86IR::  	jmp ir_tag11_cmpend
x86IR::  	ir_tag11_cmp:
x86IR::  	movl $1 var_9
x86IR::  	ir_tag11_cmpend:
x86IR::  	pushl var_9
x86IR::  	call inject_bool
x86IR::  	movl eax var_8
x86IR::  	pushl var_8
x86IR::  	call tag
x86IR::  	movl eax var_13
x86IR::  	cmpl $0 var_13
x86IR::  	je ir_tag12_cmp
x86IR::  	movl $0 var_13
x86IR::  	jmp ir_tag12_cmpend
x86IR::  	ir_tag12_cmp:
x86IR::  	movl $1 var_13
x86IR::  	ir_tag12_cmpend:
x86IR::  	cmpl $0 var_13
x86IR::  	je ir_tag_else_13
x86IR::  	pushl var_8
x86IR::  	call project_int
x86IR::  	movl eax var_8
x86IR::  	jmp ir_tag_end_13
x86IR::  	ir_tag_else_13:
x86IR::  	pushl var_8
x86IR::  	call project_bool
x86IR::  	movl eax var_8
x86IR::  	jmp ir_tag_end_13
x86IR::  	ir_tag_end_13:
x86IR::  	cmpl $0 var_8
x86IR::  	je ir_tag_else_14
x86IR::  	pushl expl_1
x86IR::  	call project_int
x86IR::  	movl eax var_5
x86IR::  	movl var_5 var_5
x86IR::  	jmp ir_tag_end_14
x86IR::  	ir_tag_else_14:
x86IR::  	pushl expl_1
x86IR::  	call project_bool
x86IR::  	movl eax var_6
x86IR::  	movl var_6 var_5
x86IR::  	jmp ir_tag_end_14
x86IR::  	ir_tag_end_14:
x86IR::  	pushl expl_2
x86IR::  	call tag
x86IR::  	movl eax var_20
x86IR::  	cmpl $0 var_20
x86IR::  	je ir_tag15_cmp
x86IR::  	movl $0 var_19
x86IR::  	jmp ir_tag15_cmpend
x86IR::  	ir_tag15_cmp:
x86IR::  	movl $1 var_19
x86IR::  	ir_tag15_cmpend:
x86IR::  	pushl var_19
x86IR::  	call inject_bool
x86IR::  	movl eax var_18
x86IR::  	pushl var_18
x86IR::  	call tag
x86IR::  	movl eax var_23
x86IR::  	cmpl $0 var_23
x86IR::  	je ir_tag16_cmp
x86IR::  	movl $0 var_23
x86IR::  	jmp ir_tag16_cmpend
x86IR::  	ir_tag16_cmp:
x86IR::  	movl $1 var_23
x86IR::  	ir_tag16_cmpend:
x86IR::  	cmpl $0 var_23
x86IR::  	je ir_tag_else_17
x86IR::  	pushl var_18
x86IR::  	call project_int
x86IR::  	movl eax var_18
x86IR::  	jmp ir_tag_end_17
x86IR::  	ir_tag_else_17:
x86IR::  	pushl var_18
x86IR::  	call project_bool
x86IR::  	movl eax var_18
x86IR::  	jmp ir_tag_end_17
x86IR::  	ir_tag_end_17:
x86IR::  	cmpl $0 var_18
x86IR::  	je ir_tag_else_18
x86IR::  	pushl expl_2
x86IR::  	call project_int
x86IR::  	movl eax var_15
x86IR::  	movl var_15 var_15
x86IR::  	jmp ir_tag_end_18
x86IR::  	ir_tag_else_18:
x86IR::  	pushl expl_2
x86IR::  	call project_bool
x86IR::  	movl eax var_16
x86IR::  	movl var_16 var_15
x86IR::  	jmp ir_tag_end_18
x86IR::  	ir_tag_end_18:
x86IR::  	cmpl var_5 var_15
x86IR::  	je ir_tag19_cmp
x86IR::  	movl $0 var_4
x86IR::  	jmp ir_tag19_cmpend
x86IR::  	ir_tag19_cmp:
x86IR::  	movl $1 var_4
x86IR::  	ir_tag19_cmpend:
x86IR::  	pushl var_4
x86IR::  	call inject_bool
x86IR::  	movl eax var_3
x86IR::  	movl var_3 var_3
x86IR::  	jmp ir_tag_end_10
x86IR::  	ir_tag_else_10:
x86IR::  	pushl $0
x86IR::  	call inject_bool
x86IR::  	movl eax var_26
x86IR::  	movl var_26 var_3
x86IR::  	jmp ir_tag_end_10
x86IR::  	ir_tag_end_10:
x86IR::  	movl var_3 expl_0
x86IR::  	movl expl_0 var_3
x86IR::  	jmp ir_tag_end_6
x86IR::  	ir_tag_else_6:
x86IR::  	pushl expl_1
x86IR::  	call tag
x86IR::  	movl eax var_43
x86IR::  	cmpl $3 var_43
x86IR::  	je ir_tag20_cmp
x86IR::  	movl $0 var_42
x86IR::  	jmp ir_tag20_cmpend
x86IR::  	ir_tag20_cmp:
x86IR::  	movl $1 var_42
x86IR::  	ir_tag20_cmpend:
x86IR::  	pushl expl_2
x86IR::  	call tag
x86IR::  	movl eax var_46
x86IR::  	cmpl $3 var_46
x86IR::  	je ir_tag21_cmp
x86IR::  	movl $0 var_45
x86IR::  	jmp ir_tag21_cmpend
x86IR::  	ir_tag21_cmp:
x86IR::  	movl $1 var_45
x86IR::  	ir_tag21_cmpend:
x86IR::  	movl var_42 var_41
x86IR::  	andl var_45 var_41
x86IR::  	pushl var_41
x86IR::  	call inject_bool
x86IR::  	movl eax var_40
x86IR::  	pushl var_40
x86IR::  	call tag
x86IR::  	movl eax var_50
x86IR::  	cmpl $0 var_50
x86IR::  	je ir_tag22_cmp
x86IR::  	movl $0 var_50
x86IR::  	jmp ir_tag22_cmpend
x86IR::  	ir_tag22_cmp:
x86IR::  	movl $1 var_50
x86IR::  	ir_tag22_cmpend:
x86IR::  	cmpl $0 var_50
x86IR::  	je ir_tag_else_23
x86IR::  	pushl var_40
x86IR::  	call project_int
x86IR::  	movl eax var_40
x86IR::  	jmp ir_tag_end_23
x86IR::  	ir_tag_else_23:
x86IR::  	pushl var_40
x86IR::  	call project_bool
x86IR::  	movl eax var_40
x86IR::  	jmp ir_tag_end_23
x86IR::  	ir_tag_end_23:
x86IR::  	cmpl $0 var_40
x86IR::  	je ir_tag_else_24
x86IR::  	pushl $3
x86IR::  	call inject_int
x86IR::  	pushl eax
x86IR::  	call create_list
x86IR::  	pushl eax
x86IR::  	call inject_big
x86IR::  	movl eax var_36
x86IR::  	pushl $0
x86IR::  	call inject_int
x86IR::  	movl eax ebx
x86IR::  	pushl $1
x86IR::  	call inject_int
x86IR::  	pushl eax
x86IR::  	pushl ebx
x86IR::  	pushl var_36
x86IR::  	call set_subscript
x86IR::  	pushl $1
x86IR::  	call inject_int
x86IR::  	movl eax ebx
x86IR::  	pushl $2
x86IR::  	call inject_int
x86IR::  	pushl eax
x86IR::  	pushl ebx
x86IR::  	pushl var_36
x86IR::  	call set_subscript
x86IR::  	pushl $2
x86IR::  	call inject_int
x86IR::  	movl eax ebx
x86IR::  	pushl $3
x86IR::  	call inject_int
x86IR::  	pushl eax
x86IR::  	pushl ebx
x86IR::  	pushl var_36
x86IR::  	call set_subscript
x86IR::  	cmpl user_x var_36
x86IR::  	je ir_tag25_cmp
x86IR::  	movl $0 var_35
x86IR::  	jmp ir_tag25_cmpend
x86IR::  	ir_tag25_cmp:
x86IR::  	movl $1 var_35
x86IR::  	ir_tag25_cmpend:
x86IR::  	pushl var_35
x86IR::  	call inject_bool
x86IR::  	movl eax var_34
x86IR::  	movl var_34 expl_0
x86IR::  	movl expl_0 var_34
x86IR::  	movl var_34 var_3
x86IR::  	jmp ir_tag_end_24
x86IR::  	ir_tag_else_24:
x86IR::  	call call_error
x86IR::  	pushl eax
x86IR::  	call inject_int
x86IR::  	movl eax var_39
x86IR::  	movl var_39 var_34
x86IR::  	movl var_34 var_3
x86IR::  	jmp ir_tag_end_24
x86IR::  	ir_tag_end_24:
x86IR::  	jmp ir_tag_end_6
x86IR::  	ir_tag_end_6:
x86IR::  	movl expl_0 var_1
x86IR::  	movl expl_0 var_1
x86IR::  	movl var_1 expl_3
x86IR::  	pushl expl_3
x86IR::  	call tag
x86IR::  	movl eax var_92
x86IR::  	cmpl $0 var_92
x86IR::  	je ir_tag26_cmp
x86IR::  	movl $0 var_91
x86IR::  	jmp ir_tag26_cmpend
x86IR::  	ir_tag26_cmp:
x86IR::  	movl $1 var_91
x86IR::  	ir_tag26_cmpend:
x86IR::  	pushl var_91
x86IR::  	call inject_bool
x86IR::  	movl eax var_90
x86IR::  	pushl var_90
x86IR::  	call tag
x86IR::  	movl eax var_95
x86IR::  	cmpl $0 var_95
x86IR::  	je ir_tag27_cmp
x86IR::  	movl $0 var_95
x86IR::  	jmp ir_tag27_cmpend
x86IR::  	ir_tag27_cmp:
x86IR::  	movl $1 var_95
x86IR::  	ir_tag27_cmpend:
x86IR::  	cmpl $0 var_95
x86IR::  	je ir_tag_else_28
x86IR::  	pushl var_90
x86IR::  	call project_int
x86IR::  	movl eax var_90
x86IR::  	jmp ir_tag_end_28
x86IR::  	ir_tag_else_28:
x86IR::  	pushl var_90
x86IR::  	call project_bool
x86IR::  	movl eax var_90
x86IR::  	jmp ir_tag_end_28
x86IR::  	ir_tag_end_28:
x86IR::  	cmpl $0 var_90
x86IR::  	je ir_tag_else_29
x86IR::  	pushl expl_3
x86IR::  	call project_int
x86IR::  	movl eax var_74
x86IR::  	pushl var_74
x86IR::  	call print_int_nl
x86IR::  	jmp ir_tag_end_29
x86IR::  	ir_tag_else_29:
x86IR::  	pushl expl_3
x86IR::  	call tag
x86IR::  	movl eax var_85
x86IR::  	cmpl $1 var_85
x86IR::  	je ir_tag30_cmp
x86IR::  	movl $0 var_84
x86IR::  	jmp ir_tag30_cmpend
x86IR::  	ir_tag30_cmp:
x86IR::  	movl $1 var_84
x86IR::  	ir_tag30_cmpend:
x86IR::  	pushl var_84
x86IR::  	call inject_bool
x86IR::  	movl eax var_83
x86IR::  	pushl var_83
x86IR::  	call tag
x86IR::  	movl eax var_88
x86IR::  	cmpl $0 var_88
x86IR::  	je ir_tag31_cmp
x86IR::  	movl $0 var_88
x86IR::  	jmp ir_tag31_cmpend
x86IR::  	ir_tag31_cmp:
x86IR::  	movl $1 var_88
x86IR::  	ir_tag31_cmpend:
x86IR::  	cmpl $0 var_88
x86IR::  	je ir_tag_else_32
x86IR::  	pushl var_83
x86IR::  	call project_int
x86IR::  	movl eax var_83
x86IR::  	jmp ir_tag_end_32
x86IR::  	ir_tag_else_32:
x86IR::  	pushl var_83
x86IR::  	call project_bool
x86IR::  	movl eax var_83
x86IR::  	jmp ir_tag_end_32
x86IR::  	ir_tag_end_32:
x86IR::  	cmpl $0 var_83
x86IR::  	je ir_tag_else_33
x86IR::  	pushl expl_3
x86IR::  	call print_any
x86IR::  	jmp ir_tag_end_33
x86IR::  	ir_tag_else_33:
x86IR::  	pushl expl_3
x86IR::  	call tag
x86IR::  	movl eax var_78
x86IR::  	cmpl $3 var_78
x86IR::  	je ir_tag34_cmp
x86IR::  	movl $0 var_77
x86IR::  	jmp ir_tag34_cmpend
x86IR::  	ir_tag34_cmp:
x86IR::  	movl $1 var_77
x86IR::  	ir_tag34_cmpend:
x86IR::  	pushl var_77
x86IR::  	call inject_bool
x86IR::  	movl eax var_76
x86IR::  	pushl var_76
x86IR::  	call tag
x86IR::  	movl eax var_81
x86IR::  	cmpl $0 var_81
x86IR::  	je ir_tag35_cmp
x86IR::  	movl $0 var_81
x86IR::  	jmp ir_tag35_cmpend
x86IR::  	ir_tag35_cmp:
x86IR::  	movl $1 var_81
x86IR::  	ir_tag35_cmpend:
x86IR::  	cmpl $0 var_81
x86IR::  	je ir_tag_else_36
x86IR::  	pushl var_76
x86IR::  	call project_int
x86IR::  	movl eax var_76
x86IR::  	jmp ir_tag_end_36
x86IR::  	ir_tag_else_36:
x86IR::  	pushl var_76
x86IR::  	call project_bool
x86IR::  	movl eax var_76
x86IR::  	jmp ir_tag_end_36
x86IR::  	ir_tag_end_36:
x86IR::  	cmpl $0 var_76
x86IR::  	je ir_tag_else_37
x86IR::  	pushl expl_3
x86IR::  	call print_any
x86IR::  	jmp ir_tag_end_37
x86IR::  	ir_tag_else_37:
x86IR::  	call call_error
x86IR::  	pushl eax
x86IR::  	call inject_int
x86IR::  	movl eax var_75
x86IR::  	movl var_75 var_75
x86IR::  	movl var_75 var_75
x86IR::  	jmp ir_tag_end_37
x86IR::  	ir_tag_end_37:
x86IR::  	jmp ir_tag_end_33
x86IR::  	ir_tag_end_33:
x86IR::  	jmp ir_tag_end_29
x86IR::  	ir_tag_end_29:
VariableGraph::  # of variables: 67
