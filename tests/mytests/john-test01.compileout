compiler:: base tree:
compiler::	Printnl([Not(List([Const(1), Const(2), Const(3)]))], None)
explicate:: Explicated Tree:
Module(None, Stmt([Let(Name('expl_2'), Let(Name('expl_1'), List([Const(1), Const(2), Const(3)]), IfExp(Compare(Const(0), [('==', GetTag(Name('expl_1')))]), Assign([Name('expl_0')], InjectFrom(bool, Not(ProjectTo(int, Name('expl_1'))))), IfExp(Compare(Const(1), [('==', GetTag(Name('expl_1')))]), Assign([Name('expl_0')], InjectFrom(bool, Not(ProjectTo(int, Name('expl_1'))))), CallFunc(Name('call_error'), [], None, None)))), IfExp(Compare(Const(0), [('==', GetTag(Name('expl_2')))]), Printnl([ProjectTo(int, Name('expl_2'))], None), IfExp(Compare(Const(1), [('==', GetTag(Name('expl_2')))]), PrintBool(Name('expl_2')), IfExp(Compare(Const(3), [('==', GetTag(Name('expl_2')))]), PrintBig(Name('expl_2')), CallFunc(Name('call_error'), [], None, None)))))]))
Flatten:: Flattened AST tree:
Flatten:: 	Assign([AssName('var_0', 'OP-ASSIGN')], List([Const(1), Const(2), Const(3)]))
Flatten:: 	Let(Name('expl_1'), Name('var_0'), Stmt([Assign([AssName('var_18', 'OP-ASSIGN')], GetTag(Name('expl_1'))), Assign([AssName('var_17', 'OP-ASSIGN')], Compare(Const(0), [('==', Name('var_18'))])), IfExp(Name('var_17'), Stmt([Assign([AssName('var_4', 'OP-ASSIGN')], ProjectTo(int, Name('expl_1'))), Assign([AssName('var_3', 'OP-ASSIGN')], Not(Name('var_4'))), Assign([AssName('var_2', 'OP-ASSIGN')], InjectFrom(bool, Name('var_3'))), Assign([Name('expl_0')], Name('var_2')), Assign([AssName('var_2', 'OP-ASSIGN')], Name('expl_0'))]), Stmt([Assign([AssName('var_14', 'OP-ASSIGN')], GetTag(Name('expl_1'))), Assign([AssName('var_13', 'OP-ASSIGN')], Compare(Const(1), [('==', Name('var_14'))])), IfExp(Name('var_13'), Stmt([Assign([AssName('var_9', 'OP-ASSIGN')], ProjectTo(int, Name('expl_1'))), Assign([AssName('var_8', 'OP-ASSIGN')], Not(Name('var_9'))), Assign([AssName('var_7', 'OP-ASSIGN')], InjectFrom(bool, Name('var_8'))), Assign([Name('expl_0')], Name('var_7')), Assign([AssName('var_7', 'OP-ASSIGN')], Name('expl_0')), Assign([AssName('var_2', 'OP-ASSIGN')], Name('var_7'))]), Stmt([Assign([AssName('var_12', 'OP-ASSIGN')], CallFunc(Name('call_error'), [], None, None)), Assign([AssName('var_7', 'OP-ASSIGN')], Name('var_12')), Assign([AssName('var_2', 'OP-ASSIGN')], Name('var_7'))]))]))]))
Flatten:: 	Assign([AssName('var_0', 'OP-ASSIGN')], Name('expl_0'))
Flatten:: 	Let(Name('expl_2'), Name('var_0'), Stmt([Assign([AssName('var_32', 'OP-ASSIGN')], GetTag(Name('expl_2'))), Assign([AssName('var_31', 'OP-ASSIGN')], Compare(Const(0), [('==', Name('var_32'))])), IfExp(Name('var_31'), Stmt([Assign([AssName('var_21', 'OP-ASSIGN')], ProjectTo(int, Name('expl_2'))), Printnl([Name('var_21')], None)]), Stmt([Assign([AssName('var_28', 'OP-ASSIGN')], GetTag(Name('expl_2'))), Assign([AssName('var_27', 'OP-ASSIGN')], Compare(Const(1), [('==', Name('var_28'))])), IfExp(Name('var_27'), Stmt([PrintBool(Name('expl_2'))]), Stmt([Assign([AssName('var_24', 'OP-ASSIGN')], GetTag(Name('expl_2'))), Assign([AssName('var_23', 'OP-ASSIGN')], Compare(Const(3), [('==', Name('var_24'))])), IfExp(Name('var_23'), Stmt([PrintBig(Name('expl_2'))]), Stmt([Assign([AssName('var_22', 'OP-ASSIGN')], CallFunc(Name('call_error'), [], None, None)), Assign([AssName('var_22', 'OP-ASSIGN')], Name('var_22')), Assign([AssName('var_22', 'OP-ASSIGN')], Name('var_22'))]))]))]))]))
x86IR::  Intermediate representation:
x86IR::  	pushl $3
x86IR::  	call inject_int
x86IR::  	pushl eax
x86IR::  	call create_list
x86IR::  	pushl eax
x86IR::  	call inject_big
x86IR::  	movl eax var_0
x86IR::  	pushl $0
x86IR::  	call inject_int
x86IR::  	movl eax ebx
x86IR::  	pushl $1
x86IR::  	call inject_int
x86IR::  	pushl eax
x86IR::  	pushl ebx
x86IR::  	pushl var_0
x86IR::  	call set_subscript
x86IR::  	pushl $1
x86IR::  	call inject_int
x86IR::  	movl eax ebx
x86IR::  	pushl $2
x86IR::  	call inject_int
x86IR::  	pushl eax
x86IR::  	pushl ebx
x86IR::  	pushl var_0
x86IR::  	call set_subscript
x86IR::  	pushl $2
x86IR::  	call inject_int
x86IR::  	movl eax ebx
x86IR::  	pushl $3
x86IR::  	call inject_int
x86IR::  	pushl eax
x86IR::  	pushl ebx
x86IR::  	pushl var_0
x86IR::  	call set_subscript
x86IR::  	movl var_0 expl_1
x86IR::  	pushl expl_1
x86IR::  	call tag
x86IR::  	movl eax var_18
x86IR::  	cmpl $0 var_18
x86IR::  	je ir_tag0_cmp
x86IR::  	movl $0 var_17
x86IR::  	jmp ir_tag0_cmpend
x86IR::  	ir_tag0_cmp:
x86IR::  	movl $1 var_17
x86IR::  	ir_tag0_cmpend:
x86IR::  	cmpl $0 var_17
x86IR::  	je ir_tag_else_1
x86IR::  	pushl expl_1
x86IR::  	call project_int
x86IR::  	movl eax var_4
x86IR::  	cmpl $0 var_4
x86IR::  	je ir_tag_not_notzero_2
x86IR::  	movl $0 var_3
x86IR::  	jmp ir_tag_not_end_2
x86IR::  	ir_tag_not_notzero_2:
x86IR::  	movl $1 var_3
x86IR::  	ir_tag_not_end_2:
x86IR::  	pushl var_3
x86IR::  	call inject_bool
x86IR::  	movl eax var_2
x86IR::  	movl var_2 expl_0
x86IR::  	movl expl_0 var_2
x86IR::  	jmp ir_tag_end_1
x86IR::  	ir_tag_else_1:
x86IR::  	pushl expl_1
x86IR::  	call tag
x86IR::  	movl eax var_14
x86IR::  	cmpl $1 var_14
x86IR::  	je ir_tag3_cmp
x86IR::  	movl $0 var_13
x86IR::  	jmp ir_tag3_cmpend
x86IR::  	ir_tag3_cmp:
x86IR::  	movl $1 var_13
x86IR::  	ir_tag3_cmpend:
x86IR::  	cmpl $0 var_13
x86IR::  	je ir_tag_else_4
x86IR::  	pushl expl_1
x86IR::  	call project_int
x86IR::  	movl eax var_9
x86IR::  	cmpl $0 var_9
x86IR::  	je ir_tag_not_notzero_5
x86IR::  	movl $0 var_8
x86IR::  	jmp ir_tag_not_end_5
x86IR::  	ir_tag_not_notzero_5:
x86IR::  	movl $1 var_8
x86IR::  	ir_tag_not_end_5:
x86IR::  	pushl var_8
x86IR::  	call inject_bool
x86IR::  	movl eax var_7
x86IR::  	movl var_7 expl_0
x86IR::  	movl expl_0 var_7
x86IR::  	movl var_7 var_2
x86IR::  	jmp ir_tag_end_4
x86IR::  	ir_tag_else_4:
x86IR::  	call call_error
x86IR::  	pushl eax
x86IR::  	call inject_int
x86IR::  	movl eax var_12
x86IR::  	movl var_12 var_7
x86IR::  	movl var_7 var_2
x86IR::  	jmp ir_tag_end_4
x86IR::  	ir_tag_end_4:
x86IR::  	jmp ir_tag_end_1
x86IR::  	ir_tag_end_1:
x86IR::  	movl expl_0 var_0
x86IR::  	movl var_0 expl_2
x86IR::  	pushl expl_2
x86IR::  	call tag
x86IR::  	movl eax var_32
x86IR::  	cmpl $0 var_32
x86IR::  	je ir_tag6_cmp
x86IR::  	movl $0 var_31
x86IR::  	jmp ir_tag6_cmpend
x86IR::  	ir_tag6_cmp:
x86IR::  	movl $1 var_31
x86IR::  	ir_tag6_cmpend:
x86IR::  	cmpl $0 var_31
x86IR::  	je ir_tag_else_7
x86IR::  	pushl expl_2
x86IR::  	call project_int
x86IR::  	movl eax var_21
x86IR::  	pushl var_21
x86IR::  	call print_int_nl
x86IR::  	jmp ir_tag_end_7
x86IR::  	ir_tag_else_7:
x86IR::  	pushl expl_2
x86IR::  	call tag
x86IR::  	movl eax var_28
x86IR::  	cmpl $1 var_28
x86IR::  	je ir_tag8_cmp
x86IR::  	movl $0 var_27
x86IR::  	jmp ir_tag8_cmpend
x86IR::  	ir_tag8_cmp:
x86IR::  	movl $1 var_27
x86IR::  	ir_tag8_cmpend:
x86IR::  	cmpl $0 var_27
x86IR::  	je ir_tag_else_9
x86IR::  	pushl expl_2
x86IR::  	call print_any
x86IR::  	jmp ir_tag_end_9
x86IR::  	ir_tag_else_9:
x86IR::  	pushl expl_2
x86IR::  	call tag
x86IR::  	movl eax var_24
x86IR::  	cmpl $3 var_24
x86IR::  	je ir_tag10_cmp
x86IR::  	movl $0 var_23
x86IR::  	jmp ir_tag10_cmpend
x86IR::  	ir_tag10_cmp:
x86IR::  	movl $1 var_23
x86IR::  	ir_tag10_cmpend:
x86IR::  	cmpl $0 var_23
x86IR::  	je ir_tag_else_11
x86IR::  	pushl expl_2
x86IR::  	call print_any
x86IR::  	jmp ir_tag_end_11
x86IR::  	ir_tag_else_11:
x86IR::  	call call_error
x86IR::  	pushl eax
x86IR::  	call inject_int
x86IR::  	movl eax var_22
x86IR::  	movl var_22 var_22
x86IR::  	movl var_22 var_22
x86IR::  	jmp ir_tag_end_11
x86IR::  	ir_tag_end_11:
x86IR::  	jmp ir_tag_end_9
x86IR::  	ir_tag_end_9:
x86IR::  	jmp ir_tag_end_7
x86IR::  	ir_tag_end_7:
VariableGraph::  # of variables: 25
