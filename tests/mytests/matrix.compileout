compiler:: base tree:
compiler::	Assign([AssName('a', 'OP_ASSIGN')], List([List([List([Const(1), Const(2), Const(3)]), Const(2), Const(3)]), List([Const(4), Const(5), Const(6)]), List([Const(7), Const(8), Const(9)])]))
compiler::	Assign([Subscript(Subscript(Subscript(Name('a'), 'OP_APPLY', [Const(0)]), 'OP_APPLY', [Const(0)]), 'OP_ASSIGN', [Const(0)])], Const(69))
compiler::	Printnl([Name('a')], None)
explicate:: Explicated Tree:
Module(None, Stmt([Assign([AssName('a', 'OP_ASSIGN')], List([List([List([Const(1), Const(2), Const(3)]), Const(2), Const(3)]), List([Const(4), Const(5), Const(6)]), List([Const(7), Const(8), Const(9)])])), Assign([Subscript(Subscript(Subscript(Name('a'), 'OP_APPLY', [Const(0)]), 'OP_APPLY', [Const(0)]), 'OP_ASSIGN', [Const(0)])], Const(69)), Let(Name('expl_0'), Name('a'), IfExp(InjectFrom(bool, Compare(Const(0), [('==', GetTag(Name('expl_0')))])), Printnl([ProjectTo(int, Name('expl_0'))], None), IfExp(InjectFrom(bool, Compare(Const(1), [('==', GetTag(Name('expl_0')))])), PrintBool(Name('expl_0')), IfExp(InjectFrom(bool, Compare(Const(3), [('==', GetTag(Name('expl_0')))])), PrintBig(Name('expl_0')), CallFunc(Name('call_error'), [], None, None)))))]))
Flatten:: Flattened AST tree:
Flatten:: 	Assign([AssName('var_2', 'OP-ASSIGN')], List([Const(1), Const(2), Const(3)]))
Flatten:: 	Assign([AssName('var_1', 'OP-ASSIGN')], List([Name('var_2'), Const(2), Const(3)]))
Flatten:: 	Assign([AssName('var_5', 'OP-ASSIGN')], List([Const(4), Const(5), Const(6)]))
Flatten:: 	Assign([AssName('var_7', 'OP-ASSIGN')], List([Const(7), Const(8), Const(9)]))
Flatten:: 	Assign([AssName('var_0', 'OP-ASSIGN')], List([Name('var_1'), Name('var_5'), Name('var_7')]))
Flatten:: 	Assign([AssName('user_a', 'OP_ASSIGN')], Name('var_0'))
Flatten:: 	Assign([AssName('var_10', 'OP-ASSIGN')], Subscript(Name('user_a'), 'OP_APPLY', [Const(0)]))
Flatten:: 	Assign([AssName('var_9', 'OP-ASSIGN')], Subscript(Name('var_10'), 'OP_APPLY', [Const(0)]))
Flatten:: 	Assign([Subscript(Name('var_9'), 'OP_ASSIGN', [Const(0)])], Const(69))
Flatten:: 	Let(Name('expl_0'), Name('user_a'), Stmt([Assign([AssName('var_31', 'OP-ASSIGN')], GetTag(Name('expl_0'))), Assign([AssName('var_30', 'OP-ASSIGN')], Compare(Const(0), [('==', Name('var_31'))])), Assign([AssName('var_29', 'OP-ASSIGN')], InjectFrom(bool, Name('var_30'))), Assign([AssName('var_34', 'OP-ASSIGN')], GetTag(Name('var_29'))), Assign([AssName('var_34', 'OP-ASSIGN')], Compare(Const(0), [('==', Name('var_34'))])), IfExp(Name('var_34'), Stmt([Assign([AssName('var_29', 'OP-ASSIGN')], ProjectTo(int, Name('var_29')))]), Stmt([Assign([AssName('var_29', 'OP-ASSIGN')], ProjectTo(bool, Name('var_29')))])), IfExp(Name('var_29'), Stmt([Assign([AssName('var_13', 'OP-ASSIGN')], ProjectTo(int, Name('expl_0'))), Printnl([Name('var_13')], None)]), Stmt([Assign([AssName('var_24', 'OP-ASSIGN')], GetTag(Name('expl_0'))), Assign([AssName('var_23', 'OP-ASSIGN')], Compare(Const(1), [('==', Name('var_24'))])), Assign([AssName('var_22', 'OP-ASSIGN')], InjectFrom(bool, Name('var_23'))), Assign([AssName('var_27', 'OP-ASSIGN')], GetTag(Name('var_22'))), Assign([AssName('var_27', 'OP-ASSIGN')], Compare(Const(0), [('==', Name('var_27'))])), IfExp(Name('var_27'), Stmt([Assign([AssName('var_22', 'OP-ASSIGN')], ProjectTo(int, Name('var_22')))]), Stmt([Assign([AssName('var_22', 'OP-ASSIGN')], ProjectTo(bool, Name('var_22')))])), IfExp(Name('var_22'), Stmt([PrintBool(Name('expl_0'))]), Stmt([Assign([AssName('var_17', 'OP-ASSIGN')], GetTag(Name('expl_0'))), Assign([AssName('var_16', 'OP-ASSIGN')], Compare(Const(3), [('==', Name('var_17'))])), Assign([AssName('var_15', 'OP-ASSIGN')], InjectFrom(bool, Name('var_16'))), Assign([AssName('var_20', 'OP-ASSIGN')], GetTag(Name('var_15'))), Assign([AssName('var_20', 'OP-ASSIGN')], Compare(Const(0), [('==', Name('var_20'))])), IfExp(Name('var_20'), Stmt([Assign([AssName('var_15', 'OP-ASSIGN')], ProjectTo(int, Name('var_15')))]), Stmt([Assign([AssName('var_15', 'OP-ASSIGN')], ProjectTo(bool, Name('var_15')))])), IfExp(Name('var_15'), Stmt([PrintBig(Name('expl_0'))]), Stmt([Assign([AssName('var_14', 'OP-ASSIGN')], CallFunc(Name('call_error'), [], None, None)), Assign([AssName('var_14', 'OP-ASSIGN')], Name('var_14')), Assign([AssName('var_14', 'OP-ASSIGN')], Name('var_14'))]))]))]))]))
x86IR::  Intermediate representation:
x86IR::  	pushl $3
x86IR::  	call inject_int
x86IR::  	pushl eax
x86IR::  	call create_list
x86IR::  	pushl eax
x86IR::  	call inject_big
x86IR::  	movl eax var_2
x86IR::  	pushl $0
x86IR::  	call inject_int
x86IR::  	movl eax ebx
x86IR::  	pushl $1
x86IR::  	call inject_int
x86IR::  	pushl eax
x86IR::  	pushl ebx
x86IR::  	pushl var_2
x86IR::  	call set_subscript
x86IR::  	pushl $1
x86IR::  	call inject_int
x86IR::  	movl eax ebx
x86IR::  	pushl $2
x86IR::  	call inject_int
x86IR::  	pushl eax
x86IR::  	pushl ebx
x86IR::  	pushl var_2
x86IR::  	call set_subscript
x86IR::  	pushl $2
x86IR::  	call inject_int
x86IR::  	movl eax ebx
x86IR::  	pushl $3
x86IR::  	call inject_int
x86IR::  	pushl eax
x86IR::  	pushl ebx
x86IR::  	pushl var_2
x86IR::  	call set_subscript
x86IR::  	pushl $3
x86IR::  	call inject_int
x86IR::  	pushl eax
x86IR::  	call create_list
x86IR::  	pushl eax
x86IR::  	call inject_big
x86IR::  	movl eax var_1
x86IR::  	pushl $0
x86IR::  	call inject_int
x86IR::  	movl eax ebx
x86IR::  	pushl var_2
x86IR::  	pushl ebx
x86IR::  	pushl var_1
x86IR::  	call set_subscript
x86IR::  	pushl $1
x86IR::  	call inject_int
x86IR::  	movl eax ebx
x86IR::  	pushl $2
x86IR::  	call inject_int
x86IR::  	pushl eax
x86IR::  	pushl ebx
x86IR::  	pushl var_1
x86IR::  	call set_subscript
x86IR::  	pushl $2
x86IR::  	call inject_int
x86IR::  	movl eax ebx
x86IR::  	pushl $3
x86IR::  	call inject_int
x86IR::  	pushl eax
x86IR::  	pushl ebx
x86IR::  	pushl var_1
x86IR::  	call set_subscript
x86IR::  	pushl $3
x86IR::  	call inject_int
x86IR::  	pushl eax
x86IR::  	call create_list
x86IR::  	pushl eax
x86IR::  	call inject_big
x86IR::  	movl eax var_5
x86IR::  	pushl $0
x86IR::  	call inject_int
x86IR::  	movl eax ebx
x86IR::  	pushl $4
x86IR::  	call inject_int
x86IR::  	pushl eax
x86IR::  	pushl ebx
x86IR::  	pushl var_5
x86IR::  	call set_subscript
x86IR::  	pushl $1
x86IR::  	call inject_int
x86IR::  	movl eax ebx
x86IR::  	pushl $5
x86IR::  	call inject_int
x86IR::  	pushl eax
x86IR::  	pushl ebx
x86IR::  	pushl var_5
x86IR::  	call set_subscript
x86IR::  	pushl $2
x86IR::  	call inject_int
x86IR::  	movl eax ebx
x86IR::  	pushl $6
x86IR::  	call inject_int
x86IR::  	pushl eax
x86IR::  	pushl ebx
x86IR::  	pushl var_5
x86IR::  	call set_subscript
x86IR::  	pushl $3
x86IR::  	call inject_int
x86IR::  	pushl eax
x86IR::  	call create_list
x86IR::  	pushl eax
x86IR::  	call inject_big
x86IR::  	movl eax var_7
x86IR::  	pushl $0
x86IR::  	call inject_int
x86IR::  	movl eax ebx
x86IR::  	pushl $7
x86IR::  	call inject_int
x86IR::  	pushl eax
x86IR::  	pushl ebx
x86IR::  	pushl var_7
x86IR::  	call set_subscript
x86IR::  	pushl $1
x86IR::  	call inject_int
x86IR::  	movl eax ebx
x86IR::  	pushl $8
x86IR::  	call inject_int
x86IR::  	pushl eax
x86IR::  	pushl ebx
x86IR::  	pushl var_7
x86IR::  	call set_subscript
x86IR::  	pushl $2
x86IR::  	call inject_int
x86IR::  	movl eax ebx
x86IR::  	pushl $9
x86IR::  	call inject_int
x86IR::  	pushl eax
x86IR::  	pushl ebx
x86IR::  	pushl var_7
x86IR::  	call set_subscript
x86IR::  	pushl $3
x86IR::  	call inject_int
x86IR::  	pushl eax
x86IR::  	call create_list
x86IR::  	pushl eax
x86IR::  	call inject_big
x86IR::  	movl eax var_0
x86IR::  	pushl $0
x86IR::  	call inject_int
x86IR::  	movl eax ebx
x86IR::  	pushl var_1
x86IR::  	pushl ebx
x86IR::  	pushl var_0
x86IR::  	call set_subscript
x86IR::  	pushl $1
x86IR::  	call inject_int
x86IR::  	movl eax ebx
x86IR::  	pushl var_5
x86IR::  	pushl ebx
x86IR::  	pushl var_0
x86IR::  	call set_subscript
x86IR::  	pushl $2
x86IR::  	call inject_int
x86IR::  	movl eax ebx
x86IR::  	pushl var_7
x86IR::  	pushl ebx
x86IR::  	pushl var_0
x86IR::  	call set_subscript
x86IR::  	movl var_0 user_a
x86IR::  	pushl $0
x86IR::  	call inject_int
x86IR::  	pushl eax
x86IR::  	pushl user_a
x86IR::  	call get_subscript
x86IR::  	movl eax var_10
x86IR::  	pushl $0
x86IR::  	call inject_int
x86IR::  	pushl eax
x86IR::  	pushl var_10
x86IR::  	call get_subscript
x86IR::  	movl eax var_9
x86IR::  	pushl $69
x86IR::  	call inject_int
x86IR::  	movl eax edx
x86IR::  	pushl $0
x86IR::  	call inject_int
x86IR::  	pushl edx
x86IR::  	pushl eax
x86IR::  	pushl var_9
x86IR::  	call set_subscript
x86IR::  	movl user_a expl_0
x86IR::  	pushl expl_0
x86IR::  	call tag
x86IR::  	movl eax var_31
x86IR::  	cmpl $0 var_31
x86IR::  	je ir_tag0_cmp
x86IR::  	movl $0 var_30
x86IR::  	jmp ir_tag0_cmpend
x86IR::  	ir_tag0_cmp:
x86IR::  	movl $1 var_30
x86IR::  	ir_tag0_cmpend:
x86IR::  	pushl var_30
x86IR::  	call inject_bool
x86IR::  	movl eax var_29
x86IR::  	pushl var_29
x86IR::  	call tag
x86IR::  	movl eax var_34
x86IR::  	cmpl $0 var_34
x86IR::  	je ir_tag1_cmp
x86IR::  	movl $0 var_34
x86IR::  	jmp ir_tag1_cmpend
x86IR::  	ir_tag1_cmp:
x86IR::  	movl $1 var_34
x86IR::  	ir_tag1_cmpend:
x86IR::  	cmpl $0 var_34
x86IR::  	je ir_tag_else_2
x86IR::  	pushl var_29
x86IR::  	call project_int
x86IR::  	movl eax var_29
x86IR::  	jmp ir_tag_end_2
x86IR::  	ir_tag_else_2:
x86IR::  	pushl var_29
x86IR::  	call project_bool
x86IR::  	movl eax var_29
x86IR::  	jmp ir_tag_end_2
x86IR::  	ir_tag_end_2:
x86IR::  	cmpl $0 var_29
x86IR::  	je ir_tag_else_3
x86IR::  	pushl expl_0
x86IR::  	call project_int
x86IR::  	movl eax var_13
x86IR::  	pushl var_13
x86IR::  	call print_int_nl
x86IR::  	jmp ir_tag_end_3
x86IR::  	ir_tag_else_3:
x86IR::  	pushl expl_0
x86IR::  	call tag
x86IR::  	movl eax var_24
x86IR::  	cmpl $1 var_24
x86IR::  	je ir_tag4_cmp
x86IR::  	movl $0 var_23
x86IR::  	jmp ir_tag4_cmpend
x86IR::  	ir_tag4_cmp:
x86IR::  	movl $1 var_23
x86IR::  	ir_tag4_cmpend:
x86IR::  	pushl var_23
x86IR::  	call inject_bool
x86IR::  	movl eax var_22
x86IR::  	pushl var_22
x86IR::  	call tag
x86IR::  	movl eax var_27
x86IR::  	cmpl $0 var_27
x86IR::  	je ir_tag5_cmp
x86IR::  	movl $0 var_27
x86IR::  	jmp ir_tag5_cmpend
x86IR::  	ir_tag5_cmp:
x86IR::  	movl $1 var_27
x86IR::  	ir_tag5_cmpend:
x86IR::  	cmpl $0 var_27
x86IR::  	je ir_tag_else_6
x86IR::  	pushl var_22
x86IR::  	call project_int
x86IR::  	movl eax var_22
x86IR::  	jmp ir_tag_end_6
x86IR::  	ir_tag_else_6:
x86IR::  	pushl var_22
x86IR::  	call project_bool
x86IR::  	movl eax var_22
x86IR::  	jmp ir_tag_end_6
x86IR::  	ir_tag_end_6:
x86IR::  	cmpl $0 var_22
x86IR::  	je ir_tag_else_7
x86IR::  	pushl expl_0
x86IR::  	call print_any
x86IR::  	jmp ir_tag_end_7
x86IR::  	ir_tag_else_7:
x86IR::  	pushl expl_0
x86IR::  	call tag
x86IR::  	movl eax var_17
x86IR::  	cmpl $3 var_17
x86IR::  	je ir_tag8_cmp
x86IR::  	movl $0 var_16
x86IR::  	jmp ir_tag8_cmpend
x86IR::  	ir_tag8_cmp:
x86IR::  	movl $1 var_16
x86IR::  	ir_tag8_cmpend:
x86IR::  	pushl var_16
x86IR::  	call inject_bool
x86IR::  	movl eax var_15
x86IR::  	pushl var_15
x86IR::  	call tag
x86IR::  	movl eax var_20
x86IR::  	cmpl $0 var_20
x86IR::  	je ir_tag9_cmp
x86IR::  	movl $0 var_20
x86IR::  	jmp ir_tag9_cmpend
x86IR::  	ir_tag9_cmp:
x86IR::  	movl $1 var_20
x86IR::  	ir_tag9_cmpend:
x86IR::  	cmpl $0 var_20
x86IR::  	je ir_tag_else_10
x86IR::  	pushl var_15
x86IR::  	call project_int
x86IR::  	movl eax var_15
x86IR::  	jmp ir_tag_end_10
x86IR::  	ir_tag_else_10:
x86IR::  	pushl var_15
x86IR::  	call project_bool
x86IR::  	movl eax var_15
x86IR::  	jmp ir_tag_end_10
x86IR::  	ir_tag_end_10:
x86IR::  	cmpl $0 var_15
x86IR::  	je ir_tag_else_11
x86IR::  	pushl expl_0
x86IR::  	call print_any
x86IR::  	jmp ir_tag_end_11
x86IR::  	ir_tag_else_11:
x86IR::  	call call_error
x86IR::  	pushl eax
x86IR::  	call inject_int
x86IR::  	movl eax var_14
x86IR::  	movl var_14 var_14
x86IR::  	movl var_14 var_14
x86IR::  	jmp ir_tag_end_11
x86IR::  	ir_tag_end_11:
x86IR::  	jmp ir_tag_end_7
x86IR::  	ir_tag_end_7:
x86IR::  	jmp ir_tag_end_3
x86IR::  	ir_tag_end_3:
VariableGraph::  # of variables: 26
