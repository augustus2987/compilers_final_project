compiler:: base tree:
compiler::	Assign([AssName('x', 'OP_ASSIGN')], CallFunc(Name('input'), [], None, None))
compiler::	Assign([AssName('y', 'OP_ASSIGN')], CallFunc(Name('input'), [], None, None))
compiler::	Assign([AssName('z', 'OP_ASSIGN')], IfExp(Compare(Name('x'), [('==', Name('y'))]), List([Const(1), Const(2), Const(3)]), Const(3)))
compiler::	Printnl([Name('z')], None)
explicate:: Explicated Tree:
Module(None, Stmt([Assign([AssName('x', 'OP_ASSIGN')], CallFunc(Name('input'), [], None, None)), Assign([AssName('y', 'OP_ASSIGN')], CallFunc(Name('input'), [], None, None)), Assign([AssName('z', 'OP_ASSIGN')], IfExp(Let(Name('expl_1'), Name('x'), Let(Name('expl_2'), Name('y'), IfExp(Or([And([Compare(Const(0), [('==', GetTag(Name('expl_1')))]), Compare(Const(0), [('==', GetTag(Name('expl_2')))])]), And([Compare(Const(1), [('==', GetTag(Name('expl_1')))]), Compare(Const(1), [('==', GetTag(Name('expl_2')))])])]), Assign([Name('expl_0')], ProjectTo(bool, Compare(InjectFrom(int, Name('expl_1')), [('==', InjectFrom(int, Name('expl_2')))]))), IfExp(And([Compare(Const(3), [('==', GetTag(Name('expl_1')))]), Compare(Const(3), [('==', GetTag(Name('expl_2')))])]), Assign([Name('expl_0')], ProjectTo(bool, BigCompare(ProjectTo(big, Name('expl_1')), [('==', ProjectTo(big, Name('expl_2')))]))), CallFunc(Name('call_error'), [], None, None))))), List([Const(1), Const(2), Const(3)]), Const(3))), Let(Name('expl_3'), Name('z'), IfExp(Compare(Const(0), [('==', GetTag(Name('expl_3')))]), Printnl([ProjectTo(int, Name('expl_3'))], None), IfExp(Compare(Const(1), [('==', GetTag(Name('expl_3')))]), PrintBool(InjectFrom(bool, Name('expl_3'))), IfExp(Compare(Const(3), [('==', GetTag(Name('expl_3')))]), PrintBig(Name('expl_3')), CallFunc(Name('call_error'), [], None, None)))))]))
tree.then = Stmt([Assign([AssName('var_4', 'OP-ASSIGN')], InjectFrom(int, Name('expl_1'))), Assign([AssName('var_6', 'OP-ASSIGN')], InjectFrom(int, Name('expl_2'))), Assign([AssName('var_2', 'OP-ASSIGN')], Compare(Name('var_4'), [('==', Name('var_6'))])), Assign([AssName('var_2', 'OP-ASSIGN')], ProjectTo(bool, Name('var_3'))), Assign([Name('expl_0')], Name('var_2'))])
tree.then = Stmt([Assign([AssName('var_11', 'OP-ASSIGN')], ProjectTo(big, Name('expl_1'))), Assign([AssName('var_13', 'OP-ASSIGN')], ProjectTo(big, Name('expl_2'))), Assign([AssName('var_2', 'OP-ASSIGN')], BigCompare(Name('var_11'), [('==', Name('var_13'))])), Assign([AssName('var_9', 'OP-ASSIGN')], ProjectTo(bool, Name('var_10'))), Assign([Name('expl_0')], Name('var_9'))])
tree.then = Stmt([Assign([AssName('var_0', 'OP-ASSIGN')], List([Const(1), Const(2), Const(3)]))])
tree.then = Stmt([Assign([AssName('var_45', 'OP-ASSIGN')], ProjectTo(int, Name('expl_3'))), Printnl([Name('var_45')], None)])
tree.then = Stmt([Assign([AssName('var_46', 'OP-ASSIGN')], InjectFrom(bool, Name('expl_3'))), PrintBool(Name('var_46'))])
tree.then = Stmt([PrintBig(Name('expl_3'))])
Flatten:: Flattened AST tree:
Flatten:: 	Assign([AssName('var_0', 'OP-ASSIGN')], CallFunc(Name('input'), [], None, None))
Flatten:: 	Assign([AssName('user_x', 'OP_ASSIGN')], Name('var_0'))
Flatten:: 	Assign([AssName('var_0', 'OP-ASSIGN')], CallFunc(Name('input'), [], None, None))
Flatten:: 	Assign([AssName('user_y', 'OP_ASSIGN')], Name('var_0'))
Flatten:: 	Let(Name('expl_1'), Name('user_x'), Stmt([Let(Name('expl_2'), Name('user_y'), Stmt([Assign([AssName('var_29', 'OP-ASSIGN')], GetTag(Name('expl_1'))), Assign([AssName('var_28', 'OP-ASSIGN')], Compare(Const(0), [('==', Name('var_29'))])), Assign([AssName('var_32', 'OP-ASSIGN')], GetTag(Name('expl_2'))), Assign([AssName('var_31', 'OP-ASSIGN')], Compare(Const(0), [('==', Name('var_32'))])), Assign([AssName('var_27', 'OP-ASSIGN')], And([Name('var_28'), Name('var_31')])), Assign([AssName('var_37', 'OP-ASSIGN')], GetTag(Name('expl_1'))), Assign([AssName('var_36', 'OP-ASSIGN')], Compare(Const(1), [('==', Name('var_37'))])), Assign([AssName('var_40', 'OP-ASSIGN')], GetTag(Name('expl_2'))), Assign([AssName('var_39', 'OP-ASSIGN')], Compare(Const(1), [('==', Name('var_40'))])), Assign([AssName('var_35', 'OP-ASSIGN')], And([Name('var_36'), Name('var_39')])), Assign([AssName('var_26', 'OP-ASSIGN')], Or([Name('var_27'), Name('var_35')])), IfExp(Name('var_26'), Stmt([Assign([AssName('var_4', 'OP-ASSIGN')], InjectFrom(int, Name('expl_1'))), Assign([AssName('var_6', 'OP-ASSIGN')], InjectFrom(int, Name('expl_2'))), Assign([AssName('var_2', 'OP-ASSIGN')], Compare(Name('var_4'), [('==', Name('var_6'))])), Assign([AssName('var_2', 'OP-ASSIGN')], ProjectTo(bool, Name('var_3'))), Assign([Name('expl_0')], Name('var_2'))]), Stmt([Assign([AssName('var_19', 'OP-ASSIGN')], GetTag(Name('expl_1'))), Assign([AssName('var_18', 'OP-ASSIGN')], Compare(Const(3), [('==', Name('var_19'))])), Assign([AssName('var_22', 'OP-ASSIGN')], GetTag(Name('expl_2'))), Assign([AssName('var_21', 'OP-ASSIGN')], Compare(Const(3), [('==', Name('var_22'))])), Assign([AssName('var_17', 'OP-ASSIGN')], And([Name('var_18'), Name('var_21')])), IfExp(Name('var_17'), Stmt([Assign([AssName('var_11', 'OP-ASSIGN')], ProjectTo(big, Name('expl_1'))), Assign([AssName('var_13', 'OP-ASSIGN')], ProjectTo(big, Name('expl_2'))), Assign([AssName('var_2', 'OP-ASSIGN')], BigCompare(Name('var_11'), [('==', Name('var_13'))])), Assign([AssName('var_9', 'OP-ASSIGN')], ProjectTo(bool, Name('var_10'))), Assign([Name('expl_0')], Name('var_9'))]), Stmt([Assign([AssName('var_16', 'OP-ASSIGN')], CallFunc(Name('call_error'), [], None, None))]))]))])), Assign([AssName('var_2', 'OP-ASSIGN')], Name('expl_0'))]))
Flatten:: 	Assign([AssName('var_2', 'OP-ASSIGN')], Name('expl_0'))
Flatten:: 	IfExp(Name('var_2'), Stmt([Assign([AssName('var_0', 'OP-ASSIGN')], List([Const(1), Const(2), Const(3)]))]), Stmt([Assign([AssName('var_0', 'OP-ASSIGN')], Const(3))]))
Flatten:: 	Assign([AssName('user_z', 'OP_ASSIGN')], Name('var_0'))
Flatten:: 	Let(Name('expl_3'), Name('user_z'), Stmt([Assign([AssName('var_57', 'OP-ASSIGN')], GetTag(Name('expl_3'))), Assign([AssName('var_56', 'OP-ASSIGN')], Compare(Const(0), [('==', Name('var_57'))])), IfExp(Name('var_56'), Stmt([Assign([AssName('var_45', 'OP-ASSIGN')], ProjectTo(int, Name('expl_3'))), Printnl([Name('var_45')], None)]), Stmt([Assign([AssName('var_53', 'OP-ASSIGN')], GetTag(Name('expl_3'))), Assign([AssName('var_52', 'OP-ASSIGN')], Compare(Const(1), [('==', Name('var_53'))])), IfExp(Name('var_52'), Stmt([Assign([AssName('var_46', 'OP-ASSIGN')], InjectFrom(bool, Name('expl_3'))), PrintBool(Name('var_46'))]), Stmt([Assign([AssName('var_49', 'OP-ASSIGN')], GetTag(Name('expl_3'))), Assign([AssName('var_48', 'OP-ASSIGN')], Compare(Const(3), [('==', Name('var_49'))])), IfExp(Name('var_48'), Stmt([PrintBig(Name('expl_3'))]), Stmt([Assign([AssName('var_47', 'OP-ASSIGN')], CallFunc(Name('call_error'), [], None, None))]))]))]))]))
Flatten:: 	Assign([AssName('var_45', 'OP-ASSIGN')], Name(None))
x86IR::  Intermediate representation:
x86IR::  	call input
x86IR::  	pushl eax
x86IR::  	call inject_int
x86IR::  	movl eax var_0
x86IR::  	movl var_0 user_x
x86IR::  	call input
x86IR::  	pushl eax
x86IR::  	call inject_int
x86IR::  	movl eax var_0
x86IR::  	movl var_0 user_y
x86IR::  	movl user_x expl_1
x86IR::  	movl user_y expl_2
x86IR::  	pushl expl_1
x86IR::  	call tag
x86IR::  	movl eax var_29
x86IR::  	cmpl $0 var_29
x86IR::  	je ir_tag0_cmp
x86IR::  	movl $0 var_28
x86IR::  	jmp ir_tag0_cmpend
x86IR::  	ir_tag0_cmp:
x86IR::  	movl $1 var_28
x86IR::  	ir_tag0_cmpend:
x86IR::  	pushl expl_2
x86IR::  	call tag
x86IR::  	movl eax var_32
x86IR::  	cmpl $0 var_32
x86IR::  	je ir_tag1_cmp
x86IR::  	movl $0 var_31
x86IR::  	jmp ir_tag1_cmpend
x86IR::  	ir_tag1_cmp:
x86IR::  	movl $1 var_31
x86IR::  	ir_tag1_cmpend:
x86IR::  	movl var_28 var_27
x86IR::  	andl var_31 var_27
x86IR::  	pushl expl_1
x86IR::  	call tag
x86IR::  	movl eax var_37
x86IR::  	cmpl $1 var_37
x86IR::  	je ir_tag2_cmp
x86IR::  	movl $0 var_36
x86IR::  	jmp ir_tag2_cmpend
x86IR::  	ir_tag2_cmp:
x86IR::  	movl $1 var_36
x86IR::  	ir_tag2_cmpend:
x86IR::  	pushl expl_2
x86IR::  	call tag
x86IR::  	movl eax var_40
x86IR::  	cmpl $1 var_40
x86IR::  	je ir_tag3_cmp
x86IR::  	movl $0 var_39
x86IR::  	jmp ir_tag3_cmpend
x86IR::  	ir_tag3_cmp:
x86IR::  	movl $1 var_39
x86IR::  	ir_tag3_cmpend:
x86IR::  	movl var_36 var_35
x86IR::  	andl var_39 var_35
x86IR::  	movl var_27 var_26
x86IR::  	orl var_35 var_26
x86IR::  	cmpl $0 var_26
x86IR::  	je ir_tag_else_4
x86IR::  	pushl expl_1
x86IR::  	call inject_int
x86IR::  	movl eax var_4
x86IR::  	pushl expl_2
x86IR::  	call inject_int
x86IR::  	movl eax var_6
x86IR::  	cmpl var_4 var_6
x86IR::  	je ir_tag5_cmp
x86IR::  	movl $0 var_2
x86IR::  	jmp ir_tag5_cmpend
x86IR::  	ir_tag5_cmp:
x86IR::  	movl $1 var_2
x86IR::  	ir_tag5_cmpend:
x86IR::  	pushl var_3
x86IR::  	call project_bool
x86IR::  	movl eax var_2
x86IR::  	movl var_2 expl_0
x86IR::  	jmp ir_tag_end_4
x86IR::  	ir_tag_else_4:
x86IR::  	pushl expl_1
x86IR::  	call tag
x86IR::  	movl eax var_19
x86IR::  	cmpl $3 var_19
x86IR::  	je ir_tag6_cmp
x86IR::  	movl $0 var_18
x86IR::  	jmp ir_tag6_cmpend
x86IR::  	ir_tag6_cmp:
x86IR::  	movl $1 var_18
x86IR::  	ir_tag6_cmpend:
x86IR::  	pushl expl_2
x86IR::  	call tag
x86IR::  	movl eax var_22
x86IR::  	cmpl $3 var_22
x86IR::  	je ir_tag7_cmp
x86IR::  	movl $0 var_21
x86IR::  	jmp ir_tag7_cmpend
x86IR::  	ir_tag7_cmp:
x86IR::  	movl $1 var_21
x86IR::  	ir_tag7_cmpend:
x86IR::  	movl var_18 var_17
x86IR::  	andl var_21 var_17
x86IR::  	cmpl $0 var_17
x86IR::  	je ir_tag_else_8
x86IR::  	pushl expl_1
x86IR::  	call project_big
x86IR::  	movl eax var_11
x86IR::  	pushl expl_2
x86IR::  	call project_big
x86IR::  	movl eax var_13
x86IR::  	pushl Name('var_11')
x86IR::  	pushl Name('var_13')
x86IR::  	call equal
x86IR::  	movl eax var_2
x86IR::  	pushl var_10
x86IR::  	call project_bool
x86IR::  	movl eax var_9
x86IR::  	movl var_9 expl_0
x86IR::  	jmp ir_tag_end_8
x86IR::  	ir_tag_else_8:
x86IR::  	call call_error
x86IR::  	pushl eax
x86IR::  	call inject_int
x86IR::  	movl eax var_16
x86IR::  	jmp ir_tag_end_8
x86IR::  	ir_tag_end_8:
x86IR::  	jmp ir_tag_end_4
x86IR::  	ir_tag_end_4:
x86IR::  	movl expl_0 var_2
x86IR::  	movl expl_0 var_2
x86IR::  	cmpl $0 var_2
x86IR::  	je ir_tag_else_9
x86IR::  	pushl $3
x86IR::  	call inject_int
x86IR::  	pushl eax
x86IR::  	call create_list
x86IR::  	pushl eax
x86IR::  	call inject_big
x86IR::  	movl eax var_0
x86IR::  	pushl $0
x86IR::  	call inject_int
x86IR::  	movl eax ebx
x86IR::  	pushl $1
x86IR::  	call inject_int
x86IR::  	pushl eax
x86IR::  	pushl ebx
x86IR::  	pushl var_0
x86IR::  	call set_subscript
x86IR::  	pushl $1
x86IR::  	call inject_int
x86IR::  	movl eax ebx
x86IR::  	pushl $2
x86IR::  	call inject_int
x86IR::  	pushl eax
x86IR::  	pushl ebx
x86IR::  	pushl var_0
x86IR::  	call set_subscript
x86IR::  	pushl $2
x86IR::  	call inject_int
x86IR::  	movl eax ebx
x86IR::  	pushl $3
x86IR::  	call inject_int
x86IR::  	pushl eax
x86IR::  	pushl ebx
x86IR::  	pushl var_0
x86IR::  	call set_subscript
x86IR::  	jmp ir_tag_end_9
x86IR::  	ir_tag_else_9:
x86IR::  	pushl $3
x86IR::  	call inject_int
x86IR::  	movl eax var_0
x86IR::  	jmp ir_tag_end_9
x86IR::  	ir_tag_end_9:
x86IR::  	movl var_0 user_z
x86IR::  	movl user_z expl_3
x86IR::  	pushl expl_3
x86IR::  	call tag
x86IR::  	movl eax var_57
x86IR::  	cmpl $0 var_57
x86IR::  	je ir_tag10_cmp
x86IR::  	movl $0 var_56
x86IR::  	jmp ir_tag10_cmpend
x86IR::  	ir_tag10_cmp:
x86IR::  	movl $1 var_56
x86IR::  	ir_tag10_cmpend:
x86IR::  	cmpl $0 var_56
x86IR::  	je ir_tag_else_11
x86IR::  	pushl expl_3
x86IR::  	call project_int
x86IR::  	movl eax var_45
x86IR::  	pushl var_45
x86IR::  	call print_int_nl
x86IR::  	jmp ir_tag_end_11
x86IR::  	ir_tag_else_11:
x86IR::  	pushl expl_3
x86IR::  	call tag
x86IR::  	movl eax var_53
x86IR::  	cmpl $1 var_53
x86IR::  	je ir_tag12_cmp
x86IR::  	movl $0 var_52
x86IR::  	jmp ir_tag12_cmpend
x86IR::  	ir_tag12_cmp:
x86IR::  	movl $1 var_52
x86IR::  	ir_tag12_cmpend:
x86IR::  	cmpl $0 var_52
x86IR::  	je ir_tag_else_13
x86IR::  	pushl expl_3
x86IR::  	call inject_bool
x86IR::  	movl eax var_46
x86IR::  	pushl var_46
x86IR::  	call print_any
x86IR::  	jmp ir_tag_end_13
x86IR::  	ir_tag_else_13:
x86IR::  	pushl expl_3
x86IR::  	call tag
x86IR::  	movl eax var_49
x86IR::  	cmpl $3 var_49
x86IR::  	je ir_tag14_cmp
x86IR::  	movl $0 var_48
x86IR::  	jmp ir_tag14_cmpend
x86IR::  	ir_tag14_cmp:
x86IR::  	movl $1 var_48
x86IR::  	ir_tag14_cmpend:
x86IR::  	cmpl $0 var_48
x86IR::  	je ir_tag_else_15
x86IR::  	pushl expl_3
x86IR::  	call print_any
x86IR::  	jmp ir_tag_end_15
x86IR::  	ir_tag_else_15:
x86IR::  	call call_error
x86IR::  	pushl eax
x86IR::  	call inject_int
x86IR::  	movl eax var_47
x86IR::  	jmp ir_tag_end_15
x86IR::  	ir_tag_end_15:
x86IR::  	jmp ir_tag_end_13
x86IR::  	ir_tag_end_13:
x86IR::  	jmp ir_tag_end_11
x86IR::  	ir_tag_end_11:
x86IR::  	movl None var_45
VariableGraph::  # of variables: 43
VariableGraph::  Assigned var_48 to eax
VariableGraph::  Assigned var_49 to eax
VariableGraph::  Assigned var_45 to eax
VariableGraph::  Assigned var_46 to eax
VariableGraph::  Assigned var_47 to eax
VariableGraph::  Assigned var_40 to eax
VariableGraph::  Assigned spill0 to eax
VariableGraph::  Assigned spill1 to eax
VariableGraph::  Assigned spill2 to eax
VariableGraph::  Assigned spill3 to eax
VariableGraph::  Assigned spill4 to eax
VariableGraph::  Assigned spill5 to eax
VariableGraph::  Assigned var_28 to ebx
VariableGraph::  Assigned var_29 to eax
VariableGraph::  Assigned var_26 to eax
VariableGraph::  Assigned var_27 to ON_STACK
VariableGraph::  Assigned edx to edx
VariableGraph::  Assigned var_22 to eax
VariableGraph::  Assigned var_21 to eax
VariableGraph::  Assigned ebx to ebx
VariableGraph::  Assigned var_9 to eax
VariableGraph::  Assigned user_z to eax
VariableGraph::  Assigned var_6 to eax
VariableGraph::  Assigned user_x to ebx
VariableGraph::  Assigned user_y to eax
VariableGraph::  Assigned var_3 to edi
VariableGraph::  Assigned var_2 to eax
VariableGraph::  Assigned var_0 to esi
VariableGraph::  Assigned var_17 to ecx
VariableGraph::  Assigned var_16 to eax
VariableGraph::  Assigned None to edi
VariableGraph::  Assigned var_13 to eax
VariableGraph::  Assigned var_11 to eax
VariableGraph::  Assigned var_10 to edi
VariableGraph::  Assigned var_53 to eax
VariableGraph::  Assigned var_52 to eax
VariableGraph::  Assigned var_57 to eax
VariableGraph::  Assigned var_56 to eax
VariableGraph::  Assigned var_19 to eax
VariableGraph::  Assigned var_18 to ebx
VariableGraph::  Assigned eax to eax
VariableGraph::  Assigned var_39 to eax
VariableGraph::  Assigned var_35 to ecx
VariableGraph::  Assigned expl_0 to ebx
VariableGraph::  Assigned var_37 to eax
VariableGraph::  Assigned var_36 to ebx
VariableGraph::  Assigned var_31 to eax
VariableGraph::  Assigned var_32 to eax
VariableGraph::  Assigned var_4 to ebx
VariableGraph::  Assigned Name('var_11') to edi
VariableGraph::  Assigned expl_1 to ON_STACK
VariableGraph::  Assigned expl_2 to esi
VariableGraph::  Assigned expl_3 to ebx
VariableGraph::  Assigned Name('var_13') to edi
VariableGraph::  Assigned ecx to ecx
