compiler:: base tree:
compiler::	Assign([AssName('x', 'OP_ASSIGN')], Dict([(Const(1), Name('True')), (Const(2), Name('True')), (Const(3), Name('False'))]))
compiler::	Assign([Subscript(Name('x'), 'OP_ASSIGN', [Const(3)])], Const(222))
explicate:: Explicated Tree:
Module(None, Stmt([Assign([AssName('x', 'OP_ASSIGN')], Dict([(Const(1), Bool(True)), (Const(2), Bool(True)), (Const(3), Bool(False))])), Assign([Subscript(Name('x'), 'OP_ASSIGN', [Const(3)])], Const(222))]))
Flatten:: Flattened AST tree:
Flatten:: 	Assign([AssName('var_0', 'OP-ASSIGN')], Dict([(Const(1), Bool(True)), (Const(2), Bool(True)), (Const(3), Bool(False))]))
Flatten:: 	Assign([AssName('user_x', 'OP_ASSIGN')], Name('var_0'))
Flatten:: 	Assign([Subscript(Name('user_x'), 'OP_ASSIGN', [Const(3)])], Const(222))
x86IR::  Intermediate representation:
x86IR::  	call create_dict
x86IR::  	pushl eax
x86IR::  	call inject_big
x86IR::  	movl eax var_0
x86IR::  	pushl $1
x86IR::  	call inject_int
x86IR::  	movl eax ebx
x86IR::  	pushl $1
x86IR::  	call inject_bool
x86IR::  	pushl eax
x86IR::  	pushl ebx
x86IR::  	pushl var_0
x86IR::  	call set_subscript
x86IR::  	pushl $2
x86IR::  	call inject_int
x86IR::  	movl eax ebx
x86IR::  	pushl $1
x86IR::  	call inject_bool
x86IR::  	pushl eax
x86IR::  	pushl ebx
x86IR::  	pushl var_0
x86IR::  	call set_subscript
x86IR::  	pushl $3
x86IR::  	call inject_int
x86IR::  	movl eax ebx
x86IR::  	pushl $0
x86IR::  	call inject_bool
x86IR::  	pushl eax
x86IR::  	pushl ebx
x86IR::  	pushl var_0
x86IR::  	call set_subscript
x86IR::  	movl var_0 user_x
x86IR::  	pushl $222
x86IR::  	call inject_int
x86IR::  	movl eax edx
x86IR::  	pushl $3
x86IR::  	call inject_int
x86IR::  	pushl edx
x86IR::  	pushl eax
x86IR::  	pushl user_x
x86IR::  	call set_subscript
VariableGraph::  # of variables: 5
