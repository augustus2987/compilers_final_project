compiler:: base tree:
compiler::	Assign([AssName('x', 'OP_ASSIGN')], IfExp(CallFunc(Name('input'), [], None, None), Const(2), List([Const(1), Const(2), Const(3)])))
compiler::	Printnl([Name('x')], None)
explicate:: Explicated Tree:
Module(None, Stmt([Assign([AssName('x', 'OP_ASSIGN')], IfExp(CallFunc(Name('input'), [], None, None), Const(2), List([Const(1), Const(2), Const(3)]))), Let(Name('expl_0'), Name('x'), IfExp(InjectFrom(bool, Compare(Const(0), [('==', GetTag(Name('expl_0')))])), Printnl([ProjectTo(int, Name('expl_0'))], None), IfExp(InjectFrom(bool, Compare(Const(1), [('==', GetTag(Name('expl_0')))])), PrintBool(Name('expl_0')), IfExp(InjectFrom(bool, Compare(Const(3), [('==', GetTag(Name('expl_0')))])), PrintBig(Name('expl_0')), CallFunc(Name('call_error'), [], None, None)))))]))
Flatten:: Flattened AST tree:
Flatten:: 	Assign([AssName('var_2', 'OP-ASSIGN')], CallFunc(Name('input'), [], None, None))
Flatten:: 	Assign([AssName('var_3', 'OP-ASSIGN')], GetTag(Name('var_2')))
Flatten:: 	Assign([AssName('var_3', 'OP-ASSIGN')], Compare(Const(0), [('==', Name('var_3'))]))
Flatten:: 	IfExp(Name('var_3'), Stmt([Assign([AssName('var_2', 'OP-ASSIGN')], ProjectTo(int, Name('var_2')))]), Stmt([Assign([AssName('var_2', 'OP-ASSIGN')], ProjectTo(bool, Name('var_2')))]))
Flatten:: 	IfExp(Name('var_2'), Stmt([Assign([AssName('var_0', 'OP-ASSIGN')], Const(2)), Assign([AssName('var_0', 'OP-ASSIGN')], Name('var_0'))]), Stmt([Assign([AssName('var_0', 'OP-ASSIGN')], List([Const(1), Const(2), Const(3)])), Assign([AssName('var_0', 'OP-ASSIGN')], Name('var_0'))]))
Flatten:: 	Assign([AssName('user_x', 'OP_ASSIGN')], Name('var_0'))
Flatten:: 	Let(Name('expl_0'), Name('user_x'), Stmt([Assign([AssName('var_22', 'OP-ASSIGN')], GetTag(Name('expl_0'))), Assign([AssName('var_21', 'OP-ASSIGN')], Compare(Const(0), [('==', Name('var_22'))])), Assign([AssName('var_20', 'OP-ASSIGN')], InjectFrom(bool, Name('var_21'))), Assign([AssName('var_25', 'OP-ASSIGN')], GetTag(Name('var_20'))), Assign([AssName('var_25', 'OP-ASSIGN')], Compare(Const(0), [('==', Name('var_25'))])), IfExp(Name('var_25'), Stmt([Assign([AssName('var_20', 'OP-ASSIGN')], ProjectTo(int, Name('var_20')))]), Stmt([Assign([AssName('var_20', 'OP-ASSIGN')], ProjectTo(bool, Name('var_20')))])), IfExp(Name('var_20'), Stmt([Assign([AssName('var_4', 'OP-ASSIGN')], ProjectTo(int, Name('expl_0'))), Printnl([Name('var_4')], None)]), Stmt([Assign([AssName('var_15', 'OP-ASSIGN')], GetTag(Name('expl_0'))), Assign([AssName('var_14', 'OP-ASSIGN')], Compare(Const(1), [('==', Name('var_15'))])), Assign([AssName('var_13', 'OP-ASSIGN')], InjectFrom(bool, Name('var_14'))), Assign([AssName('var_18', 'OP-ASSIGN')], GetTag(Name('var_13'))), Assign([AssName('var_18', 'OP-ASSIGN')], Compare(Const(0), [('==', Name('var_18'))])), IfExp(Name('var_18'), Stmt([Assign([AssName('var_13', 'OP-ASSIGN')], ProjectTo(int, Name('var_13')))]), Stmt([Assign([AssName('var_13', 'OP-ASSIGN')], ProjectTo(bool, Name('var_13')))])), IfExp(Name('var_13'), Stmt([PrintBool(Name('expl_0'))]), Stmt([Assign([AssName('var_8', 'OP-ASSIGN')], GetTag(Name('expl_0'))), Assign([AssName('var_7', 'OP-ASSIGN')], Compare(Const(3), [('==', Name('var_8'))])), Assign([AssName('var_6', 'OP-ASSIGN')], InjectFrom(bool, Name('var_7'))), Assign([AssName('var_11', 'OP-ASSIGN')], GetTag(Name('var_6'))), Assign([AssName('var_11', 'OP-ASSIGN')], Compare(Const(0), [('==', Name('var_11'))])), IfExp(Name('var_11'), Stmt([Assign([AssName('var_6', 'OP-ASSIGN')], ProjectTo(int, Name('var_6')))]), Stmt([Assign([AssName('var_6', 'OP-ASSIGN')], ProjectTo(bool, Name('var_6')))])), IfExp(Name('var_6'), Stmt([PrintBig(Name('expl_0'))]), Stmt([Assign([AssName('var_5', 'OP-ASSIGN')], CallFunc(Name('call_error'), [], None, None)), Assign([AssName('var_5', 'OP-ASSIGN')], Name('var_5')), Assign([AssName('var_5', 'OP-ASSIGN')], Name('var_5'))]))]))]))]))
x86IR::  Intermediate representation:
x86IR::  	call input
x86IR::  	pushl eax
x86IR::  	call inject_int
x86IR::  	movl eax var_2
x86IR::  	pushl var_2
x86IR::  	call tag
x86IR::  	movl eax var_3
x86IR::  	cmpl $0 var_3
x86IR::  	je ir_tag0_cmp
x86IR::  	movl $0 var_3
x86IR::  	jmp ir_tag0_cmpend
x86IR::  	ir_tag0_cmp:
x86IR::  	movl $1 var_3
x86IR::  	ir_tag0_cmpend:
x86IR::  	cmpl $0 var_3
x86IR::  	je ir_tag_else_1
x86IR::  	pushl var_2
x86IR::  	call project_int
x86IR::  	movl eax var_2
x86IR::  	jmp ir_tag_end_1
x86IR::  	ir_tag_else_1:
x86IR::  	pushl var_2
x86IR::  	call project_bool
x86IR::  	movl eax var_2
x86IR::  	jmp ir_tag_end_1
x86IR::  	ir_tag_end_1:
x86IR::  	cmpl $0 var_2
x86IR::  	je ir_tag_else_2
x86IR::  	pushl $2
x86IR::  	call inject_int
x86IR::  	movl eax var_0
x86IR::  	movl var_0 var_0
x86IR::  	jmp ir_tag_end_2
x86IR::  	ir_tag_else_2:
x86IR::  	pushl $3
x86IR::  	call inject_int
x86IR::  	pushl eax
x86IR::  	call create_list
x86IR::  	pushl eax
x86IR::  	call inject_big
x86IR::  	movl eax var_0
x86IR::  	pushl $0
x86IR::  	call inject_int
x86IR::  	movl eax ebx
x86IR::  	pushl $1
x86IR::  	call inject_int
x86IR::  	pushl eax
x86IR::  	pushl ebx
x86IR::  	pushl var_0
x86IR::  	call set_subscript
x86IR::  	pushl $1
x86IR::  	call inject_int
x86IR::  	movl eax ebx
x86IR::  	pushl $2
x86IR::  	call inject_int
x86IR::  	pushl eax
x86IR::  	pushl ebx
x86IR::  	pushl var_0
x86IR::  	call set_subscript
x86IR::  	pushl $2
x86IR::  	call inject_int
x86IR::  	movl eax ebx
x86IR::  	pushl $3
x86IR::  	call inject_int
x86IR::  	pushl eax
x86IR::  	pushl ebx
x86IR::  	pushl var_0
x86IR::  	call set_subscript
x86IR::  	movl var_0 var_0
x86IR::  	jmp ir_tag_end_2
x86IR::  	ir_tag_end_2:
x86IR::  	movl var_0 user_x
x86IR::  	movl user_x expl_0
x86IR::  	pushl expl_0
x86IR::  	call tag
x86IR::  	movl eax var_22
x86IR::  	cmpl $0 var_22
x86IR::  	je ir_tag3_cmp
x86IR::  	movl $0 var_21
x86IR::  	jmp ir_tag3_cmpend
x86IR::  	ir_tag3_cmp:
x86IR::  	movl $1 var_21
x86IR::  	ir_tag3_cmpend:
x86IR::  	pushl var_21
x86IR::  	call inject_bool
x86IR::  	movl eax var_20
x86IR::  	pushl var_20
x86IR::  	call tag
x86IR::  	movl eax var_25
x86IR::  	cmpl $0 var_25
x86IR::  	je ir_tag4_cmp
x86IR::  	movl $0 var_25
x86IR::  	jmp ir_tag4_cmpend
x86IR::  	ir_tag4_cmp:
x86IR::  	movl $1 var_25
x86IR::  	ir_tag4_cmpend:
x86IR::  	cmpl $0 var_25
x86IR::  	je ir_tag_else_5
x86IR::  	pushl var_20
x86IR::  	call project_int
x86IR::  	movl eax var_20
x86IR::  	jmp ir_tag_end_5
x86IR::  	ir_tag_else_5:
x86IR::  	pushl var_20
x86IR::  	call project_bool
x86IR::  	movl eax var_20
x86IR::  	jmp ir_tag_end_5
x86IR::  	ir_tag_end_5:
x86IR::  	cmpl $0 var_20
x86IR::  	je ir_tag_else_6
x86IR::  	pushl expl_0
x86IR::  	call project_int
x86IR::  	movl eax var_4
x86IR::  	pushl var_4
x86IR::  	call print_int_nl
x86IR::  	jmp ir_tag_end_6
x86IR::  	ir_tag_else_6:
x86IR::  	pushl expl_0
x86IR::  	call tag
x86IR::  	movl eax var_15
x86IR::  	cmpl $1 var_15
x86IR::  	je ir_tag7_cmp
x86IR::  	movl $0 var_14
x86IR::  	jmp ir_tag7_cmpend
x86IR::  	ir_tag7_cmp:
x86IR::  	movl $1 var_14
x86IR::  	ir_tag7_cmpend:
x86IR::  	pushl var_14
x86IR::  	call inject_bool
x86IR::  	movl eax var_13
x86IR::  	pushl var_13
x86IR::  	call tag
x86IR::  	movl eax var_18
x86IR::  	cmpl $0 var_18
x86IR::  	je ir_tag8_cmp
x86IR::  	movl $0 var_18
x86IR::  	jmp ir_tag8_cmpend
x86IR::  	ir_tag8_cmp:
x86IR::  	movl $1 var_18
x86IR::  	ir_tag8_cmpend:
x86IR::  	cmpl $0 var_18
x86IR::  	je ir_tag_else_9
x86IR::  	pushl var_13
x86IR::  	call project_int
x86IR::  	movl eax var_13
x86IR::  	jmp ir_tag_end_9
x86IR::  	ir_tag_else_9:
x86IR::  	pushl var_13
x86IR::  	call project_bool
x86IR::  	movl eax var_13
x86IR::  	jmp ir_tag_end_9
x86IR::  	ir_tag_end_9:
x86IR::  	cmpl $0 var_13
x86IR::  	je ir_tag_else_10
x86IR::  	pushl expl_0
x86IR::  	call print_any
x86IR::  	jmp ir_tag_end_10
x86IR::  	ir_tag_else_10:
x86IR::  	pushl expl_0
x86IR::  	call tag
x86IR::  	movl eax var_8
x86IR::  	cmpl $3 var_8
x86IR::  	je ir_tag11_cmp
x86IR::  	movl $0 var_7
x86IR::  	jmp ir_tag11_cmpend
x86IR::  	ir_tag11_cmp:
x86IR::  	movl $1 var_7
x86IR::  	ir_tag11_cmpend:
x86IR::  	pushl var_7
x86IR::  	call inject_bool
x86IR::  	movl eax var_6
x86IR::  	pushl var_6
x86IR::  	call tag
x86IR::  	movl eax var_11
x86IR::  	cmpl $0 var_11
x86IR::  	je ir_tag12_cmp
x86IR::  	movl $0 var_11
x86IR::  	jmp ir_tag12_cmpend
x86IR::  	ir_tag12_cmp:
x86IR::  	movl $1 var_11
x86IR::  	ir_tag12_cmpend:
x86IR::  	cmpl $0 var_11
x86IR::  	je ir_tag_else_13
x86IR::  	pushl var_6
x86IR::  	call project_int
x86IR::  	movl eax var_6
x86IR::  	jmp ir_tag_end_13
x86IR::  	ir_tag_else_13:
x86IR::  	pushl var_6
x86IR::  	call project_bool
x86IR::  	movl eax var_6
x86IR::  	jmp ir_tag_end_13
x86IR::  	ir_tag_end_13:
x86IR::  	cmpl $0 var_6
x86IR::  	je ir_tag_else_14
x86IR::  	pushl expl_0
x86IR::  	call print_any
x86IR::  	jmp ir_tag_end_14
x86IR::  	ir_tag_else_14:
x86IR::  	call call_error
x86IR::  	pushl eax
x86IR::  	call inject_int
x86IR::  	movl eax var_5
x86IR::  	movl var_5 var_5
x86IR::  	movl var_5 var_5
x86IR::  	jmp ir_tag_end_14
x86IR::  	ir_tag_end_14:
x86IR::  	jmp ir_tag_end_10
x86IR::  	ir_tag_end_10:
x86IR::  	jmp ir_tag_end_6
x86IR::  	ir_tag_end_6:
VariableGraph::  # of variables: 21
