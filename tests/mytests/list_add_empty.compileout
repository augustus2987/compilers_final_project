compiler:: base tree:
compiler::	Assign([AssName('x', 'OP_ASSIGN')], Add((List([Const(1), Const(2)]), List(()))))
explicate:: Explicated Tree:
Module(None, Stmt([Assign([AssName('x', 'OP_ASSIGN')], Let(Name('expl_1'), List([Const(1), Const(2)]), Let(Name('expl_2'), List(()), IfExp(InjectFrom(bool, And([Or([Compare(Const(0), [('==', GetTag(Name('expl_1')))]), Compare(Const(1), [('==', GetTag(Name('expl_1')))])]), Or([Compare(Const(0), [('==', GetTag(Name('expl_2')))]), Compare(Const(1), [('==', GetTag(Name('expl_2')))])])])), Assign([Name('expl_0')], InjectFrom(int, Add((IfExp(InjectFrom(bool, Compare(Const(0), [('==', GetTag(Name('expl_1')))])), ProjectTo(int, Name('expl_1')), ProjectTo(bool, Name('expl_1'))), IfExp(InjectFrom(bool, Compare(Const(0), [('==', GetTag(Name('expl_2')))])), ProjectTo(int, Name('expl_2')), ProjectTo(bool, Name('expl_2'))))))), IfExp(InjectFrom(bool, And([Compare(Const(3), [('==', GetTag(Name('expl_1')))]), Compare(Const(3), [('==', GetTag(Name('expl_2')))])])), Assign([Name('expl_0')], InjectFrom(big, CallBigAdd(ProjectTo(big, Name('expl_1')), ProjectTo(big, Name('expl_2'))))), CallFunc(Name('call_error'), [], None, None))))))]))
Flatten:: Flattened AST tree:
Flatten:: 	Assign([AssName('var_0', 'OP-ASSIGN')], List([Const(1), Const(2)]))
Flatten:: 	Let(Name('expl_1'), Name('var_0'), Stmt([Assign([AssName('var_2', 'OP-ASSIGN')], List(())), Let(Name('expl_2'), Name('var_2'), Stmt([Assign([AssName('var_51', 'OP-ASSIGN')], GetTag(Name('expl_1'))), Assign([AssName('var_50', 'OP-ASSIGN')], Compare(Const(0), [('==', Name('var_51'))])), Assign([AssName('var_54', 'OP-ASSIGN')], GetTag(Name('expl_1'))), Assign([AssName('var_53', 'OP-ASSIGN')], Compare(Const(1), [('==', Name('var_54'))])), Assign([AssName('var_49', 'OP-ASSIGN')], Or([Name('var_50'), Name('var_53')])), Assign([AssName('var_59', 'OP-ASSIGN')], GetTag(Name('expl_2'))), Assign([AssName('var_58', 'OP-ASSIGN')], Compare(Const(0), [('==', Name('var_59'))])), Assign([AssName('var_62', 'OP-ASSIGN')], GetTag(Name('expl_2'))), Assign([AssName('var_61', 'OP-ASSIGN')], Compare(Const(1), [('==', Name('var_62'))])), Assign([AssName('var_57', 'OP-ASSIGN')], Or([Name('var_58'), Name('var_61')])), Assign([AssName('var_48', 'OP-ASSIGN')], And([Name('var_49'), Name('var_57')])), Assign([AssName('var_47', 'OP-ASSIGN')], InjectFrom(bool, Name('var_48'))), Assign([AssName('var_67', 'OP-ASSIGN')], GetTag(Name('var_47'))), Assign([AssName('var_67', 'OP-ASSIGN')], Compare(Const(0), [('==', Name('var_67'))])), IfExp(Name('var_67'), Stmt([Assign([AssName('var_47', 'OP-ASSIGN')], ProjectTo(int, Name('var_47')))]), Stmt([Assign([AssName('var_47', 'OP-ASSIGN')], ProjectTo(bool, Name('var_47')))])), IfExp(Name('var_47'), Stmt([Assign([AssName('var_11', 'OP-ASSIGN')], GetTag(Name('expl_1'))), Assign([AssName('var_10', 'OP-ASSIGN')], Compare(Const(0), [('==', Name('var_11'))])), Assign([AssName('var_9', 'OP-ASSIGN')], InjectFrom(bool, Name('var_10'))), Assign([AssName('var_14', 'OP-ASSIGN')], GetTag(Name('var_9'))), Assign([AssName('var_14', 'OP-ASSIGN')], Compare(Const(0), [('==', Name('var_14'))])), IfExp(Name('var_14'), Stmt([Assign([AssName('var_9', 'OP-ASSIGN')], ProjectTo(int, Name('var_9')))]), Stmt([Assign([AssName('var_9', 'OP-ASSIGN')], ProjectTo(bool, Name('var_9')))])), IfExp(Name('var_9'), Stmt([Assign([AssName('var_6', 'OP-ASSIGN')], ProjectTo(int, Name('expl_1'))), Assign([AssName('var_6', 'OP-ASSIGN')], Name('var_6'))]), Stmt([Assign([AssName('var_7', 'OP-ASSIGN')], ProjectTo(bool, Name('expl_1'))), Assign([AssName('var_6', 'OP-ASSIGN')], Name('var_7'))])), Assign([AssName('var_21', 'OP-ASSIGN')], GetTag(Name('expl_2'))), Assign([AssName('var_20', 'OP-ASSIGN')], Compare(Const(0), [('==', Name('var_21'))])), Assign([AssName('var_19', 'OP-ASSIGN')], InjectFrom(bool, Name('var_20'))), Assign([AssName('var_24', 'OP-ASSIGN')], GetTag(Name('var_19'))), Assign([AssName('var_24', 'OP-ASSIGN')], Compare(Const(0), [('==', Name('var_24'))])), IfExp(Name('var_24'), Stmt([Assign([AssName('var_19', 'OP-ASSIGN')], ProjectTo(int, Name('var_19')))]), Stmt([Assign([AssName('var_19', 'OP-ASSIGN')], ProjectTo(bool, Name('var_19')))])), IfExp(Name('var_19'), Stmt([Assign([AssName('var_16', 'OP-ASSIGN')], ProjectTo(int, Name('expl_2'))), Assign([AssName('var_16', 'OP-ASSIGN')], Name('var_16'))]), Stmt([Assign([AssName('var_17', 'OP-ASSIGN')], ProjectTo(bool, Name('expl_2'))), Assign([AssName('var_16', 'OP-ASSIGN')], Name('var_17'))])), Assign([AssName('var_5', 'OP-ASSIGN')], Add((Name('var_6'), Name('var_16')))), Assign([AssName('var_4', 'OP-ASSIGN')], InjectFrom(int, Name('var_5'))), Assign([Name('expl_0')], Name('var_4')), Assign([AssName('var_4', 'OP-ASSIGN')], Name('expl_0'))]), Stmt([Assign([AssName('var_38', 'OP-ASSIGN')], GetTag(Name('expl_1'))), Assign([AssName('var_37', 'OP-ASSIGN')], Compare(Const(3), [('==', Name('var_38'))])), Assign([AssName('var_41', 'OP-ASSIGN')], GetTag(Name('expl_2'))), Assign([AssName('var_40', 'OP-ASSIGN')], Compare(Const(3), [('==', Name('var_41'))])), Assign([AssName('var_36', 'OP-ASSIGN')], And([Name('var_37'), Name('var_40')])), Assign([AssName('var_35', 'OP-ASSIGN')], InjectFrom(bool, Name('var_36'))), Assign([AssName('var_45', 'OP-ASSIGN')], GetTag(Name('var_35'))), Assign([AssName('var_45', 'OP-ASSIGN')], Compare(Const(0), [('==', Name('var_45'))])), IfExp(Name('var_45'), Stmt([Assign([AssName('var_35', 'OP-ASSIGN')], ProjectTo(int, Name('var_35')))]), Stmt([Assign([AssName('var_35', 'OP-ASSIGN')], ProjectTo(bool, Name('var_35')))])), IfExp(Name('var_35'), Stmt([Assign([AssName('var_29', 'OP-ASSIGN')], ProjectTo(big, Name('expl_1'))), Assign([AssName('var_31', 'OP-ASSIGN')], ProjectTo(big, Name('expl_2'))), Assign([AssName('var_28', 'OP-ASSIGN')], CallBigAdd(Name('var_29'), Name('var_31'))), Assign([AssName('var_27', 'OP-ASSIGN')], InjectFrom(big, Name('var_28'))), Assign([Name('expl_0')], Name('var_27')), Assign([AssName('var_27', 'OP-ASSIGN')], Name('expl_0')), Assign([AssName('var_4', 'OP-ASSIGN')], Name('var_27'))]), Stmt([Assign([AssName('var_34', 'OP-ASSIGN')], CallFunc(Name('call_error'), [], None, None)), Assign([AssName('var_27', 'OP-ASSIGN')], Name('var_34')), Assign([AssName('var_4', 'OP-ASSIGN')], Name('var_27'))]))]))])), Assign([AssName('var_2', 'OP-ASSIGN')], Name('expl_0'))]))
Flatten:: 	Assign([AssName('var_0', 'OP-ASSIGN')], Name('expl_0'))
Flatten:: 	Assign([AssName('user_x', 'OP_ASSIGN')], Name('var_0'))
x86IR::  Intermediate representation:
x86IR::  	pushl $2
x86IR::  	call inject_int
x86IR::  	pushl eax
x86IR::  	call create_list
x86IR::  	pushl eax
x86IR::  	call inject_big
x86IR::  	movl eax var_0
x86IR::  	pushl $0
x86IR::  	call inject_int
x86IR::  	movl eax ebx
x86IR::  	pushl $1
x86IR::  	call inject_int
x86IR::  	pushl eax
x86IR::  	pushl ebx
x86IR::  	pushl var_0
x86IR::  	call set_subscript
x86IR::  	pushl $1
x86IR::  	call inject_int
x86IR::  	movl eax ebx
x86IR::  	pushl $2
x86IR::  	call inject_int
x86IR::  	pushl eax
x86IR::  	pushl ebx
x86IR::  	pushl var_0
x86IR::  	call set_subscript
x86IR::  	movl var_0 expl_1
x86IR::  	pushl $0
x86IR::  	call inject_int
x86IR::  	pushl eax
x86IR::  	call create_list
x86IR::  	pushl eax
x86IR::  	call inject_big
x86IR::  	movl eax var_2
x86IR::  	movl var_2 expl_2
x86IR::  	pushl expl_1
x86IR::  	call tag
x86IR::  	movl eax var_51
x86IR::  	cmpl $0 var_51
x86IR::  	je ir_tag0_cmp
x86IR::  	movl $0 var_50
x86IR::  	jmp ir_tag0_cmpend
x86IR::  	ir_tag0_cmp:
x86IR::  	movl $1 var_50
x86IR::  	ir_tag0_cmpend:
x86IR::  	pushl expl_1
x86IR::  	call tag
x86IR::  	movl eax var_54
x86IR::  	cmpl $1 var_54
x86IR::  	je ir_tag1_cmp
x86IR::  	movl $0 var_53
x86IR::  	jmp ir_tag1_cmpend
x86IR::  	ir_tag1_cmp:
x86IR::  	movl $1 var_53
x86IR::  	ir_tag1_cmpend:
x86IR::  	movl var_50 var_49
x86IR::  	orl var_53 var_49
x86IR::  	pushl expl_2
x86IR::  	call tag
x86IR::  	movl eax var_59
x86IR::  	cmpl $0 var_59
x86IR::  	je ir_tag2_cmp
x86IR::  	movl $0 var_58
x86IR::  	jmp ir_tag2_cmpend
x86IR::  	ir_tag2_cmp:
x86IR::  	movl $1 var_58
x86IR::  	ir_tag2_cmpend:
x86IR::  	pushl expl_2
x86IR::  	call tag
x86IR::  	movl eax var_62
x86IR::  	cmpl $1 var_62
x86IR::  	je ir_tag3_cmp
x86IR::  	movl $0 var_61
x86IR::  	jmp ir_tag3_cmpend
x86IR::  	ir_tag3_cmp:
x86IR::  	movl $1 var_61
x86IR::  	ir_tag3_cmpend:
x86IR::  	movl var_58 var_57
x86IR::  	orl var_61 var_57
x86IR::  	movl var_49 var_48
x86IR::  	andl var_57 var_48
x86IR::  	pushl var_48
x86IR::  	call inject_bool
x86IR::  	movl eax var_47
x86IR::  	pushl var_47
x86IR::  	call tag
x86IR::  	movl eax var_67
x86IR::  	cmpl $0 var_67
x86IR::  	je ir_tag4_cmp
x86IR::  	movl $0 var_67
x86IR::  	jmp ir_tag4_cmpend
x86IR::  	ir_tag4_cmp:
x86IR::  	movl $1 var_67
x86IR::  	ir_tag4_cmpend:
x86IR::  	cmpl $0 var_67
x86IR::  	je ir_tag_else_5
x86IR::  	pushl var_47
x86IR::  	call project_int
x86IR::  	movl eax var_47
x86IR::  	jmp ir_tag_end_5
x86IR::  	ir_tag_else_5:
x86IR::  	pushl var_47
x86IR::  	call project_bool
x86IR::  	movl eax var_47
x86IR::  	jmp ir_tag_end_5
x86IR::  	ir_tag_end_5:
x86IR::  	cmpl $0 var_47
x86IR::  	je ir_tag_else_6
x86IR::  	pushl expl_1
x86IR::  	call tag
x86IR::  	movl eax var_11
x86IR::  	cmpl $0 var_11
x86IR::  	je ir_tag7_cmp
x86IR::  	movl $0 var_10
x86IR::  	jmp ir_tag7_cmpend
x86IR::  	ir_tag7_cmp:
x86IR::  	movl $1 var_10
x86IR::  	ir_tag7_cmpend:
x86IR::  	pushl var_10
x86IR::  	call inject_bool
x86IR::  	movl eax var_9
x86IR::  	pushl var_9
x86IR::  	call tag
x86IR::  	movl eax var_14
x86IR::  	cmpl $0 var_14
x86IR::  	je ir_tag8_cmp
x86IR::  	movl $0 var_14
x86IR::  	jmp ir_tag8_cmpend
x86IR::  	ir_tag8_cmp:
x86IR::  	movl $1 var_14
x86IR::  	ir_tag8_cmpend:
x86IR::  	cmpl $0 var_14
x86IR::  	je ir_tag_else_9
x86IR::  	pushl var_9
x86IR::  	call project_int
x86IR::  	movl eax var_9
x86IR::  	jmp ir_tag_end_9
x86IR::  	ir_tag_else_9:
x86IR::  	pushl var_9
x86IR::  	call project_bool
x86IR::  	movl eax var_9
x86IR::  	jmp ir_tag_end_9
x86IR::  	ir_tag_end_9:
x86IR::  	cmpl $0 var_9
x86IR::  	je ir_tag_else_10
x86IR::  	pushl expl_1
x86IR::  	call project_int
x86IR::  	movl eax var_6
x86IR::  	movl var_6 var_6
x86IR::  	jmp ir_tag_end_10
x86IR::  	ir_tag_else_10:
x86IR::  	pushl expl_1
x86IR::  	call project_bool
x86IR::  	movl eax var_7
x86IR::  	movl var_7 var_6
x86IR::  	jmp ir_tag_end_10
x86IR::  	ir_tag_end_10:
x86IR::  	pushl expl_2
x86IR::  	call tag
x86IR::  	movl eax var_21
x86IR::  	cmpl $0 var_21
x86IR::  	je ir_tag11_cmp
x86IR::  	movl $0 var_20
x86IR::  	jmp ir_tag11_cmpend
x86IR::  	ir_tag11_cmp:
x86IR::  	movl $1 var_20
x86IR::  	ir_tag11_cmpend:
x86IR::  	pushl var_20
x86IR::  	call inject_bool
x86IR::  	movl eax var_19
x86IR::  	pushl var_19
x86IR::  	call tag
x86IR::  	movl eax var_24
x86IR::  	cmpl $0 var_24
x86IR::  	je ir_tag12_cmp
x86IR::  	movl $0 var_24
x86IR::  	jmp ir_tag12_cmpend
x86IR::  	ir_tag12_cmp:
x86IR::  	movl $1 var_24
x86IR::  	ir_tag12_cmpend:
x86IR::  	cmpl $0 var_24
x86IR::  	je ir_tag_else_13
x86IR::  	pushl var_19
x86IR::  	call project_int
x86IR::  	movl eax var_19
x86IR::  	jmp ir_tag_end_13
x86IR::  	ir_tag_else_13:
x86IR::  	pushl var_19
x86IR::  	call project_bool
x86IR::  	movl eax var_19
x86IR::  	jmp ir_tag_end_13
x86IR::  	ir_tag_end_13:
x86IR::  	cmpl $0 var_19
x86IR::  	je ir_tag_else_14
x86IR::  	pushl expl_2
x86IR::  	call project_int
x86IR::  	movl eax var_16
x86IR::  	movl var_16 var_16
x86IR::  	jmp ir_tag_end_14
x86IR::  	ir_tag_else_14:
x86IR::  	pushl expl_2
x86IR::  	call project_bool
x86IR::  	movl eax var_17
x86IR::  	movl var_17 var_16
x86IR::  	jmp ir_tag_end_14
x86IR::  	ir_tag_end_14:
x86IR::  	movl var_6 var_5
x86IR::  	addl var_16 var_5
x86IR::  	pushl var_5
x86IR::  	call inject_int
x86IR::  	movl eax var_4
x86IR::  	movl var_4 expl_0
x86IR::  	movl expl_0 var_4
x86IR::  	jmp ir_tag_end_6
x86IR::  	ir_tag_else_6:
x86IR::  	pushl expl_1
x86IR::  	call tag
x86IR::  	movl eax var_38
x86IR::  	cmpl $3 var_38
x86IR::  	je ir_tag15_cmp
x86IR::  	movl $0 var_37
x86IR::  	jmp ir_tag15_cmpend
x86IR::  	ir_tag15_cmp:
x86IR::  	movl $1 var_37
x86IR::  	ir_tag15_cmpend:
x86IR::  	pushl expl_2
x86IR::  	call tag
x86IR::  	movl eax var_41
x86IR::  	cmpl $3 var_41
x86IR::  	je ir_tag16_cmp
x86IR::  	movl $0 var_40
x86IR::  	jmp ir_tag16_cmpend
x86IR::  	ir_tag16_cmp:
x86IR::  	movl $1 var_40
x86IR::  	ir_tag16_cmpend:
x86IR::  	movl var_37 var_36
x86IR::  	andl var_40 var_36
x86IR::  	pushl var_36
x86IR::  	call inject_bool
x86IR::  	movl eax var_35
x86IR::  	pushl var_35
x86IR::  	call tag
x86IR::  	movl eax var_45
x86IR::  	cmpl $0 var_45
x86IR::  	je ir_tag17_cmp
x86IR::  	movl $0 var_45
x86IR::  	jmp ir_tag17_cmpend
x86IR::  	ir_tag17_cmp:
x86IR::  	movl $1 var_45
x86IR::  	ir_tag17_cmpend:
x86IR::  	cmpl $0 var_45
x86IR::  	je ir_tag_else_18
x86IR::  	pushl var_35
x86IR::  	call project_int
x86IR::  	movl eax var_35
x86IR::  	jmp ir_tag_end_18
x86IR::  	ir_tag_else_18:
x86IR::  	pushl var_35
x86IR::  	call project_bool
x86IR::  	movl eax var_35
x86IR::  	jmp ir_tag_end_18
x86IR::  	ir_tag_end_18:
x86IR::  	cmpl $0 var_35
x86IR::  	je ir_tag_else_19
x86IR::  	pushl expl_1
x86IR::  	call project_big
x86IR::  	movl eax var_29
x86IR::  	pushl expl_2
x86IR::  	call project_big
x86IR::  	movl eax var_31
x86IR::  	pushl var_31
x86IR::  	pushl var_29
x86IR::  	call add
x86IR::  	movl eax var_28
x86IR::  	pushl var_28
x86IR::  	call inject_big
x86IR::  	movl eax var_27
x86IR::  	movl var_27 expl_0
x86IR::  	movl expl_0 var_27
x86IR::  	movl var_27 var_4
x86IR::  	jmp ir_tag_end_19
x86IR::  	ir_tag_else_19:
x86IR::  	call call_error
x86IR::  	pushl eax
x86IR::  	call inject_int
x86IR::  	movl eax var_34
x86IR::  	movl var_34 var_27
x86IR::  	movl var_27 var_4
x86IR::  	jmp ir_tag_end_19
x86IR::  	ir_tag_end_19:
x86IR::  	jmp ir_tag_end_6
x86IR::  	ir_tag_end_6:
x86IR::  	movl expl_0 var_2
x86IR::  	movl expl_0 var_0
x86IR::  	movl var_0 user_x
VariableGraph::  # of variables: 46
