compiler:: base tree:
compiler::	Assign([AssName('x', 'OP_ASSIGN')], List([Const(1), Const(2), List([Const(10), Const(11), Const(12)]), List([Const(1), Const(0), UnarySub(Const(1))])]))
compiler::	Printnl([Name('x')], None)
compiler::	Assign([AssName('a', 'OP_ASSIGN')], Subscript(Name('x'), 'OP_APPLY', [Const(2)]))
compiler::	Printnl([Name('a')], None)
explicate:: Explicated Tree:
Module(None, Stmt([Assign([AssName('x', 'OP_ASSIGN')], List([Const(1), Const(2), List([Const(10), Const(11), Const(12)]), List([Const(1), Const(0), UnarySub(Const(1))])])), Let(Name('expl_0'), Name('x'), IfExp(InjectFrom(bool, Compare(Const(0), [('==', GetTag(Name('expl_0')))])), Printnl([ProjectTo(int, Name('expl_0'))], None), IfExp(InjectFrom(bool, Compare(Const(1), [('==', GetTag(Name('expl_0')))])), PrintBool(Name('expl_0')), IfExp(InjectFrom(bool, Compare(Const(3), [('==', GetTag(Name('expl_0')))])), PrintBig(Name('expl_0')), CallFunc(Name('call_error'), [], None, None))))), Assign([AssName('a', 'OP_ASSIGN')], Subscript(Name('x'), 'OP_APPLY', [Const(2)])), Let(Name('expl_1'), Name('a'), IfExp(InjectFrom(bool, Compare(Const(0), [('==', GetTag(Name('expl_1')))])), Printnl([ProjectTo(int, Name('expl_1'))], None), IfExp(InjectFrom(bool, Compare(Const(1), [('==', GetTag(Name('expl_1')))])), PrintBool(Name('expl_1')), IfExp(InjectFrom(bool, Compare(Const(3), [('==', GetTag(Name('expl_1')))])), PrintBig(Name('expl_1')), CallFunc(Name('call_error'), [], None, None)))))]))
Flatten:: Flattened AST tree:
Flatten:: 	Assign([AssName('var_1', 'OP-ASSIGN')], List([Const(10), Const(11), Const(12)]))
Flatten:: 	Assign([AssName('var_4', 'OP-ASSIGN')], UnarySub(Const(1)))
Flatten:: 	Assign([AssName('var_3', 'OP-ASSIGN')], List([Const(1), Const(0), Name('var_4')]))
Flatten:: 	Assign([AssName('var_0', 'OP-ASSIGN')], List([Const(1), Const(2), Name('var_1'), Name('var_3')]))
Flatten:: 	Assign([AssName('user_x', 'OP_ASSIGN')], Name('var_0'))
Flatten:: 	Let(Name('expl_0'), Name('user_x'), Stmt([Assign([AssName('var_25', 'OP-ASSIGN')], GetTag(Name('expl_0'))), Assign([AssName('var_24', 'OP-ASSIGN')], Compare(Const(0), [('==', Name('var_25'))])), Assign([AssName('var_23', 'OP-ASSIGN')], InjectFrom(bool, Name('var_24'))), Assign([AssName('var_28', 'OP-ASSIGN')], GetTag(Name('var_23'))), Assign([AssName('var_28', 'OP-ASSIGN')], Compare(Const(0), [('==', Name('var_28'))])), IfExp(Name('var_28'), Stmt([Assign([AssName('var_23', 'OP-ASSIGN')], ProjectTo(int, Name('var_23')))]), Stmt([Assign([AssName('var_23', 'OP-ASSIGN')], ProjectTo(bool, Name('var_23')))])), IfExp(Name('var_23'), Stmt([Assign([AssName('var_7', 'OP-ASSIGN')], ProjectTo(int, Name('expl_0'))), Printnl([Name('var_7')], None)]), Stmt([Assign([AssName('var_18', 'OP-ASSIGN')], GetTag(Name('expl_0'))), Assign([AssName('var_17', 'OP-ASSIGN')], Compare(Const(1), [('==', Name('var_18'))])), Assign([AssName('var_16', 'OP-ASSIGN')], InjectFrom(bool, Name('var_17'))), Assign([AssName('var_21', 'OP-ASSIGN')], GetTag(Name('var_16'))), Assign([AssName('var_21', 'OP-ASSIGN')], Compare(Const(0), [('==', Name('var_21'))])), IfExp(Name('var_21'), Stmt([Assign([AssName('var_16', 'OP-ASSIGN')], ProjectTo(int, Name('var_16')))]), Stmt([Assign([AssName('var_16', 'OP-ASSIGN')], ProjectTo(bool, Name('var_16')))])), IfExp(Name('var_16'), Stmt([PrintBool(Name('expl_0'))]), Stmt([Assign([AssName('var_11', 'OP-ASSIGN')], GetTag(Name('expl_0'))), Assign([AssName('var_10', 'OP-ASSIGN')], Compare(Const(3), [('==', Name('var_11'))])), Assign([AssName('var_9', 'OP-ASSIGN')], InjectFrom(bool, Name('var_10'))), Assign([AssName('var_14', 'OP-ASSIGN')], GetTag(Name('var_9'))), Assign([AssName('var_14', 'OP-ASSIGN')], Compare(Const(0), [('==', Name('var_14'))])), IfExp(Name('var_14'), Stmt([Assign([AssName('var_9', 'OP-ASSIGN')], ProjectTo(int, Name('var_9')))]), Stmt([Assign([AssName('var_9', 'OP-ASSIGN')], ProjectTo(bool, Name('var_9')))])), IfExp(Name('var_9'), Stmt([PrintBig(Name('expl_0'))]), Stmt([Assign([AssName('var_8', 'OP-ASSIGN')], CallFunc(Name('call_error'), [], None, None)), Assign([AssName('var_8', 'OP-ASSIGN')], Name('var_8')), Assign([AssName('var_8', 'OP-ASSIGN')], Name('var_8'))]))]))]))]))
Flatten:: 	Assign([AssName('var_29', 'OP-ASSIGN')], Subscript(Name('user_x'), 'OP_APPLY', [Const(2)]))
Flatten:: 	Assign([AssName('user_a', 'OP_ASSIGN')], Name('var_29'))
Flatten:: 	Let(Name('expl_1'), Name('user_a'), Stmt([Assign([AssName('var_48', 'OP-ASSIGN')], GetTag(Name('expl_1'))), Assign([AssName('var_47', 'OP-ASSIGN')], Compare(Const(0), [('==', Name('var_48'))])), Assign([AssName('var_46', 'OP-ASSIGN')], InjectFrom(bool, Name('var_47'))), Assign([AssName('var_51', 'OP-ASSIGN')], GetTag(Name('var_46'))), Assign([AssName('var_51', 'OP-ASSIGN')], Compare(Const(0), [('==', Name('var_51'))])), IfExp(Name('var_51'), Stmt([Assign([AssName('var_46', 'OP-ASSIGN')], ProjectTo(int, Name('var_46')))]), Stmt([Assign([AssName('var_46', 'OP-ASSIGN')], ProjectTo(bool, Name('var_46')))])), IfExp(Name('var_46'), Stmt([Assign([AssName('var_30', 'OP-ASSIGN')], ProjectTo(int, Name('expl_1'))), Printnl([Name('var_30')], None)]), Stmt([Assign([AssName('var_41', 'OP-ASSIGN')], GetTag(Name('expl_1'))), Assign([AssName('var_40', 'OP-ASSIGN')], Compare(Const(1), [('==', Name('var_41'))])), Assign([AssName('var_39', 'OP-ASSIGN')], InjectFrom(bool, Name('var_40'))), Assign([AssName('var_44', 'OP-ASSIGN')], GetTag(Name('var_39'))), Assign([AssName('var_44', 'OP-ASSIGN')], Compare(Const(0), [('==', Name('var_44'))])), IfExp(Name('var_44'), Stmt([Assign([AssName('var_39', 'OP-ASSIGN')], ProjectTo(int, Name('var_39')))]), Stmt([Assign([AssName('var_39', 'OP-ASSIGN')], ProjectTo(bool, Name('var_39')))])), IfExp(Name('var_39'), Stmt([PrintBool(Name('expl_1'))]), Stmt([Assign([AssName('var_34', 'OP-ASSIGN')], GetTag(Name('expl_1'))), Assign([AssName('var_33', 'OP-ASSIGN')], Compare(Const(3), [('==', Name('var_34'))])), Assign([AssName('var_32', 'OP-ASSIGN')], InjectFrom(bool, Name('var_33'))), Assign([AssName('var_37', 'OP-ASSIGN')], GetTag(Name('var_32'))), Assign([AssName('var_37', 'OP-ASSIGN')], Compare(Const(0), [('==', Name('var_37'))])), IfExp(Name('var_37'), Stmt([Assign([AssName('var_32', 'OP-ASSIGN')], ProjectTo(int, Name('var_32')))]), Stmt([Assign([AssName('var_32', 'OP-ASSIGN')], ProjectTo(bool, Name('var_32')))])), IfExp(Name('var_32'), Stmt([PrintBig(Name('expl_1'))]), Stmt([Assign([AssName('var_31', 'OP-ASSIGN')], CallFunc(Name('call_error'), [], None, None)), Assign([AssName('var_31', 'OP-ASSIGN')], Name('var_31')), Assign([AssName('var_31', 'OP-ASSIGN')], Name('var_31'))]))]))]))]))
x86IR::  Intermediate representation:
x86IR::  	pushl $3
x86IR::  	call inject_int
x86IR::  	pushl eax
x86IR::  	call create_list
x86IR::  	pushl eax
x86IR::  	call inject_big
x86IR::  	movl eax var_1
x86IR::  	pushl $0
x86IR::  	call inject_int
x86IR::  	movl eax ebx
x86IR::  	pushl $10
x86IR::  	call inject_int
x86IR::  	pushl eax
x86IR::  	pushl ebx
x86IR::  	pushl var_1
x86IR::  	call set_subscript
x86IR::  	pushl $1
x86IR::  	call inject_int
x86IR::  	movl eax ebx
x86IR::  	pushl $11
x86IR::  	call inject_int
x86IR::  	pushl eax
x86IR::  	pushl ebx
x86IR::  	pushl var_1
x86IR::  	call set_subscript
x86IR::  	pushl $2
x86IR::  	call inject_int
x86IR::  	movl eax ebx
x86IR::  	pushl $12
x86IR::  	call inject_int
x86IR::  	pushl eax
x86IR::  	pushl ebx
x86IR::  	pushl var_1
x86IR::  	call set_subscript
x86IR::  	movl $1 ir0
x86IR::  	negl ir0
x86IR::  	pushl ir0
x86IR::  	call inject_int
x86IR::  	movl eax var_4
x86IR::  	pushl $3
x86IR::  	call inject_int
x86IR::  	pushl eax
x86IR::  	call create_list
x86IR::  	pushl eax
x86IR::  	call inject_big
x86IR::  	movl eax var_3
x86IR::  	pushl $0
x86IR::  	call inject_int
x86IR::  	movl eax ebx
x86IR::  	pushl $1
x86IR::  	call inject_int
x86IR::  	pushl eax
x86IR::  	pushl ebx
x86IR::  	pushl var_3
x86IR::  	call set_subscript
x86IR::  	pushl $1
x86IR::  	call inject_int
x86IR::  	movl eax ebx
x86IR::  	pushl $0
x86IR::  	call inject_int
x86IR::  	pushl eax
x86IR::  	pushl ebx
x86IR::  	pushl var_3
x86IR::  	call set_subscript
x86IR::  	pushl $2
x86IR::  	call inject_int
x86IR::  	movl eax ebx
x86IR::  	pushl var_4
x86IR::  	pushl ebx
x86IR::  	pushl var_3
x86IR::  	call set_subscript
x86IR::  	pushl $4
x86IR::  	call inject_int
x86IR::  	pushl eax
x86IR::  	call create_list
x86IR::  	pushl eax
x86IR::  	call inject_big
x86IR::  	movl eax var_0
x86IR::  	pushl $0
x86IR::  	call inject_int
x86IR::  	movl eax ebx
x86IR::  	pushl $1
x86IR::  	call inject_int
x86IR::  	pushl eax
x86IR::  	pushl ebx
x86IR::  	pushl var_0
x86IR::  	call set_subscript
x86IR::  	pushl $1
x86IR::  	call inject_int
x86IR::  	movl eax ebx
x86IR::  	pushl $2
x86IR::  	call inject_int
x86IR::  	pushl eax
x86IR::  	pushl ebx
x86IR::  	pushl var_0
x86IR::  	call set_subscript
x86IR::  	pushl $2
x86IR::  	call inject_int
x86IR::  	movl eax ebx
x86IR::  	pushl var_1
x86IR::  	pushl ebx
x86IR::  	pushl var_0
x86IR::  	call set_subscript
x86IR::  	pushl $3
x86IR::  	call inject_int
x86IR::  	movl eax ebx
x86IR::  	pushl var_3
x86IR::  	pushl ebx
x86IR::  	pushl var_0
x86IR::  	call set_subscript
x86IR::  	movl var_0 user_x
x86IR::  	movl user_x expl_0
x86IR::  	pushl expl_0
x86IR::  	call tag
x86IR::  	movl eax var_25
x86IR::  	cmpl $0 var_25
x86IR::  	je ir_tag0_cmp
x86IR::  	movl $0 var_24
x86IR::  	jmp ir_tag0_cmpend
x86IR::  	ir_tag0_cmp:
x86IR::  	movl $1 var_24
x86IR::  	ir_tag0_cmpend:
x86IR::  	pushl var_24
x86IR::  	call inject_bool
x86IR::  	movl eax var_23
x86IR::  	pushl var_23
x86IR::  	call tag
x86IR::  	movl eax var_28
x86IR::  	cmpl $0 var_28
x86IR::  	je ir_tag1_cmp
x86IR::  	movl $0 var_28
x86IR::  	jmp ir_tag1_cmpend
x86IR::  	ir_tag1_cmp:
x86IR::  	movl $1 var_28
x86IR::  	ir_tag1_cmpend:
x86IR::  	cmpl $0 var_28
x86IR::  	je ir_tag_else_2
x86IR::  	pushl var_23
x86IR::  	call project_int
x86IR::  	movl eax var_23
x86IR::  	jmp ir_tag_end_2
x86IR::  	ir_tag_else_2:
x86IR::  	pushl var_23
x86IR::  	call project_bool
x86IR::  	movl eax var_23
x86IR::  	jmp ir_tag_end_2
x86IR::  	ir_tag_end_2:
x86IR::  	cmpl $0 var_23
x86IR::  	je ir_tag_else_3
x86IR::  	pushl expl_0
x86IR::  	call project_int
x86IR::  	movl eax var_7
x86IR::  	pushl var_7
x86IR::  	call print_int_nl
x86IR::  	jmp ir_tag_end_3
x86IR::  	ir_tag_else_3:
x86IR::  	pushl expl_0
x86IR::  	call tag
x86IR::  	movl eax var_18
x86IR::  	cmpl $1 var_18
x86IR::  	je ir_tag4_cmp
x86IR::  	movl $0 var_17
x86IR::  	jmp ir_tag4_cmpend
x86IR::  	ir_tag4_cmp:
x86IR::  	movl $1 var_17
x86IR::  	ir_tag4_cmpend:
x86IR::  	pushl var_17
x86IR::  	call inject_bool
x86IR::  	movl eax var_16
x86IR::  	pushl var_16
x86IR::  	call tag
x86IR::  	movl eax var_21
x86IR::  	cmpl $0 var_21
x86IR::  	je ir_tag5_cmp
x86IR::  	movl $0 var_21
x86IR::  	jmp ir_tag5_cmpend
x86IR::  	ir_tag5_cmp:
x86IR::  	movl $1 var_21
x86IR::  	ir_tag5_cmpend:
x86IR::  	cmpl $0 var_21
x86IR::  	je ir_tag_else_6
x86IR::  	pushl var_16
x86IR::  	call project_int
x86IR::  	movl eax var_16
x86IR::  	jmp ir_tag_end_6
x86IR::  	ir_tag_else_6:
x86IR::  	pushl var_16
x86IR::  	call project_bool
x86IR::  	movl eax var_16
x86IR::  	jmp ir_tag_end_6
x86IR::  	ir_tag_end_6:
x86IR::  	cmpl $0 var_16
x86IR::  	je ir_tag_else_7
x86IR::  	pushl expl_0
x86IR::  	call print_any
x86IR::  	jmp ir_tag_end_7
x86IR::  	ir_tag_else_7:
x86IR::  	pushl expl_0
x86IR::  	call tag
x86IR::  	movl eax var_11
x86IR::  	cmpl $3 var_11
x86IR::  	je ir_tag8_cmp
x86IR::  	movl $0 var_10
x86IR::  	jmp ir_tag8_cmpend
x86IR::  	ir_tag8_cmp:
x86IR::  	movl $1 var_10
x86IR::  	ir_tag8_cmpend:
x86IR::  	pushl var_10
x86IR::  	call inject_bool
x86IR::  	movl eax var_9
x86IR::  	pushl var_9
x86IR::  	call tag
x86IR::  	movl eax var_14
x86IR::  	cmpl $0 var_14
x86IR::  	je ir_tag9_cmp
x86IR::  	movl $0 var_14
x86IR::  	jmp ir_tag9_cmpend
x86IR::  	ir_tag9_cmp:
x86IR::  	movl $1 var_14
x86IR::  	ir_tag9_cmpend:
x86IR::  	cmpl $0 var_14
x86IR::  	je ir_tag_else_10
x86IR::  	pushl var_9
x86IR::  	call project_int
x86IR::  	movl eax var_9
x86IR::  	jmp ir_tag_end_10
x86IR::  	ir_tag_else_10:
x86IR::  	pushl var_9
x86IR::  	call project_bool
x86IR::  	movl eax var_9
x86IR::  	jmp ir_tag_end_10
x86IR::  	ir_tag_end_10:
x86IR::  	cmpl $0 var_9
x86IR::  	je ir_tag_else_11
x86IR::  	pushl expl_0
x86IR::  	call print_any
x86IR::  	jmp ir_tag_end_11
x86IR::  	ir_tag_else_11:
x86IR::  	call call_error
x86IR::  	pushl eax
x86IR::  	call inject_int
x86IR::  	movl eax var_8
x86IR::  	movl var_8 var_8
x86IR::  	movl var_8 var_8
x86IR::  	jmp ir_tag_end_11
x86IR::  	ir_tag_end_11:
x86IR::  	jmp ir_tag_end_7
x86IR::  	ir_tag_end_7:
x86IR::  	jmp ir_tag_end_3
x86IR::  	ir_tag_end_3:
x86IR::  	pushl $2
x86IR::  	call inject_int
x86IR::  	pushl eax
x86IR::  	pushl user_x
x86IR::  	call get_subscript
x86IR::  	movl eax var_29
x86IR::  	movl var_29 user_a
x86IR::  	movl user_a expl_1
x86IR::  	pushl expl_1
x86IR::  	call tag
x86IR::  	movl eax var_48
x86IR::  	cmpl $0 var_48
x86IR::  	je ir_tag12_cmp
x86IR::  	movl $0 var_47
x86IR::  	jmp ir_tag12_cmpend
x86IR::  	ir_tag12_cmp:
x86IR::  	movl $1 var_47
x86IR::  	ir_tag12_cmpend:
x86IR::  	pushl var_47
x86IR::  	call inject_bool
x86IR::  	movl eax var_46
x86IR::  	pushl var_46
x86IR::  	call tag
x86IR::  	movl eax var_51
x86IR::  	cmpl $0 var_51
x86IR::  	je ir_tag13_cmp
x86IR::  	movl $0 var_51
x86IR::  	jmp ir_tag13_cmpend
x86IR::  	ir_tag13_cmp:
x86IR::  	movl $1 var_51
x86IR::  	ir_tag13_cmpend:
x86IR::  	cmpl $0 var_51
x86IR::  	je ir_tag_else_14
x86IR::  	pushl var_46
x86IR::  	call project_int
x86IR::  	movl eax var_46
x86IR::  	jmp ir_tag_end_14
x86IR::  	ir_tag_else_14:
x86IR::  	pushl var_46
x86IR::  	call project_bool
x86IR::  	movl eax var_46
x86IR::  	jmp ir_tag_end_14
x86IR::  	ir_tag_end_14:
x86IR::  	cmpl $0 var_46
x86IR::  	je ir_tag_else_15
x86IR::  	pushl expl_1
x86IR::  	call project_int
x86IR::  	movl eax var_30
x86IR::  	pushl var_30
x86IR::  	call print_int_nl
x86IR::  	jmp ir_tag_end_15
x86IR::  	ir_tag_else_15:
x86IR::  	pushl expl_1
x86IR::  	call tag
x86IR::  	movl eax var_41
x86IR::  	cmpl $1 var_41
x86IR::  	je ir_tag16_cmp
x86IR::  	movl $0 var_40
x86IR::  	jmp ir_tag16_cmpend
x86IR::  	ir_tag16_cmp:
x86IR::  	movl $1 var_40
x86IR::  	ir_tag16_cmpend:
x86IR::  	pushl var_40
x86IR::  	call inject_bool
x86IR::  	movl eax var_39
x86IR::  	pushl var_39
x86IR::  	call tag
x86IR::  	movl eax var_44
x86IR::  	cmpl $0 var_44
x86IR::  	je ir_tag17_cmp
x86IR::  	movl $0 var_44
x86IR::  	jmp ir_tag17_cmpend
x86IR::  	ir_tag17_cmp:
x86IR::  	movl $1 var_44
x86IR::  	ir_tag17_cmpend:
x86IR::  	cmpl $0 var_44
x86IR::  	je ir_tag_else_18
x86IR::  	pushl var_39
x86IR::  	call project_int
x86IR::  	movl eax var_39
x86IR::  	jmp ir_tag_end_18
x86IR::  	ir_tag_else_18:
x86IR::  	pushl var_39
x86IR::  	call project_bool
x86IR::  	movl eax var_39
x86IR::  	jmp ir_tag_end_18
x86IR::  	ir_tag_end_18:
x86IR::  	cmpl $0 var_39
x86IR::  	je ir_tag_else_19
x86IR::  	pushl expl_1
x86IR::  	call print_any
x86IR::  	jmp ir_tag_end_19
x86IR::  	ir_tag_else_19:
x86IR::  	pushl expl_1
x86IR::  	call tag
x86IR::  	movl eax var_34
x86IR::  	cmpl $3 var_34
x86IR::  	je ir_tag20_cmp
x86IR::  	movl $0 var_33
x86IR::  	jmp ir_tag20_cmpend
x86IR::  	ir_tag20_cmp:
x86IR::  	movl $1 var_33
x86IR::  	ir_tag20_cmpend:
x86IR::  	pushl var_33
x86IR::  	call inject_bool
x86IR::  	movl eax var_32
x86IR::  	pushl var_32
x86IR::  	call tag
x86IR::  	movl eax var_37
x86IR::  	cmpl $0 var_37
x86IR::  	je ir_tag21_cmp
x86IR::  	movl $0 var_37
x86IR::  	jmp ir_tag21_cmpend
x86IR::  	ir_tag21_cmp:
x86IR::  	movl $1 var_37
x86IR::  	ir_tag21_cmpend:
x86IR::  	cmpl $0 var_37
x86IR::  	je ir_tag_else_22
x86IR::  	pushl var_32
x86IR::  	call project_int
x86IR::  	movl eax var_32
x86IR::  	jmp ir_tag_end_22
x86IR::  	ir_tag_else_22:
x86IR::  	pushl var_32
x86IR::  	call project_bool
x86IR::  	movl eax var_32
x86IR::  	jmp ir_tag_end_22
x86IR::  	ir_tag_end_22:
x86IR::  	cmpl $0 var_32
x86IR::  	je ir_tag_else_23
x86IR::  	pushl expl_1
x86IR::  	call print_any
x86IR::  	jmp ir_tag_end_23
x86IR::  	ir_tag_else_23:
x86IR::  	call call_error
x86IR::  	pushl eax
x86IR::  	call inject_int
x86IR::  	movl eax var_31
x86IR::  	movl var_31 var_31
x86IR::  	movl var_31 var_31
x86IR::  	jmp ir_tag_end_23
x86IR::  	ir_tag_end_23:
x86IR::  	jmp ir_tag_end_19
x86IR::  	ir_tag_end_19:
x86IR::  	jmp ir_tag_end_15
x86IR::  	ir_tag_end_15:
VariableGraph::  # of variables: 40
