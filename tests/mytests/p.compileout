compiler:: base tree:
compiler::	Assign([AssName('x', 'OP_ASSIGN')], Dict([(Const(1), Name('True')), (Const(2), Name('True')), (Const(3), Name('False'))]))
compiler::	Printnl([Subscript(Name('x'), 'OP_APPLY', [Const(2)])], None)
compiler::	Assign([Subscript(Name('x'), 'OP_ASSIGN', [Const(3)])], Const(222))
explicate:: Explicated Tree:
Module(None, Stmt([Assign([AssName('x', 'OP_ASSIGN')], Dict([(Const(1), Name('True')), (Const(2), Name('True')), (Const(3), Name('False'))])), Let(Name('expl_0'), Subscript(Name('x'), 'OP_APPLY', [Const(2)]), IfExp(Compare(Const(0), [('==', GetTag(Name('expl_0')))]), Printnl([ProjectTo(int, Name('expl_0'))], None), IfExp(Compare(Const(1), [('==', GetTag(Name('expl_0')))]), PrintBool(InjectFrom(bool, Name('expl_0'))), IfExp(Compare(Const(3), [('==', GetTag(Name('expl_0')))]), PrintBig(Name('expl_0')), CallFunc(Name('call_error'), [], None, None))))), Assign([Subscript(Name('x'), 'OP_ASSIGN', [Const(3)])], Const(222))]))
tree.then = Stmt([Assign([AssName('var_3', 'OP-ASSIGN')], ProjectTo(int, Name('expl_0'))), Printnl([Name('var_3')], None)])
tree.then = Stmt([Assign([AssName('var_4', 'OP-ASSIGN')], InjectFrom(bool, Name('expl_0'))), PrintBool(Name('var_4'))])
tree.then = Stmt([PrintBig(Name('expl_0'))])
Flatten:: Flattened AST tree:
Flatten:: 	Assign([AssName('var_0', 'OP-ASSIGN')], Dict([(Const(1), Name('user_True')), (Const(2), Name('user_True')), (Const(3), Name('user_False'))]))
Flatten:: 	Assign([AssName('user_x', 'OP_ASSIGN')], Name('var_0'))
Flatten:: 	Assign([AssName('var_1', 'OP-ASSIGN')], Subscript(Name('user_x'), 'OP_APPLY', [Const(2)]))
Flatten:: 	Let(Name('expl_0'), Name('var_1'), Stmt([Assign([AssName('var_15', 'OP-ASSIGN')], GetTag(Name('expl_0'))), Assign([AssName('var_14', 'OP-ASSIGN')], Compare(Const(0), [('==', Name('var_15'))])), IfExp(Name('var_14'), Stmt([Assign([AssName('var_3', 'OP-ASSIGN')], ProjectTo(int, Name('expl_0'))), Printnl([Name('var_3')], None)]), Stmt([Assign([AssName('var_11', 'OP-ASSIGN')], GetTag(Name('expl_0'))), Assign([AssName('var_10', 'OP-ASSIGN')], Compare(Const(1), [('==', Name('var_11'))])), IfExp(Name('var_10'), Stmt([Assign([AssName('var_4', 'OP-ASSIGN')], InjectFrom(bool, Name('expl_0'))), PrintBool(Name('var_4'))]), Stmt([Assign([AssName('var_7', 'OP-ASSIGN')], GetTag(Name('expl_0'))), Assign([AssName('var_6', 'OP-ASSIGN')], Compare(Const(3), [('==', Name('var_7'))])), IfExp(Name('var_6'), Stmt([PrintBig(Name('expl_0'))]), Stmt([Assign([AssName('var_5', 'OP-ASSIGN')], CallFunc(Name('call_error'), [], None, None))]))]))]))]))
Flatten:: 	Assign([AssName('var_1', 'OP-ASSIGN')], Name(None))
Flatten:: 	Assign([Subscript(Name('user_x'), 'OP_ASSIGN', [Const(3)])], Const(222))
x86IR::  Intermediate representation:
x86IR::  	call create_dict
x86IR::  	pushl eax
x86IR::  	call inject_big
x86IR::  	movl eax var_0
x86IR::  	pushl $1
x86IR::  	call inject_int
x86IR::  	movl eax ebx
x86IR::  	movl user_True eax
x86IR::  	pushl eax
x86IR::  	pushl ebx
x86IR::  	pushl var_0
x86IR::  	call set_subscript
x86IR::  	pushl $2
x86IR::  	call inject_int
x86IR::  	movl eax ebx
x86IR::  	movl user_True eax
x86IR::  	pushl eax
x86IR::  	pushl ebx
x86IR::  	pushl var_0
x86IR::  	call set_subscript
x86IR::  	pushl $3
x86IR::  	call inject_int
x86IR::  	movl eax ebx
x86IR::  	movl user_False eax
x86IR::  	pushl eax
x86IR::  	pushl ebx
x86IR::  	pushl var_0
x86IR::  	call set_subscript
x86IR::  	movl var_0 user_x
x86IR::  	pushl $2
x86IR::  	call inject_int
x86IR::  	pushl eax
x86IR::  	pushl user_x
x86IR::  	call get_subscript
x86IR::  	movl eax var_1
x86IR::  	movl var_1 expl_0
x86IR::  	pushl expl_0
x86IR::  	call tag
x86IR::  	movl eax var_15
x86IR::  	cmpl $0 var_15
x86IR::  	je ir_tag0_cmp
x86IR::  	movl $0 var_14
x86IR::  	jmp ir_tag0_cmpend
x86IR::  	ir_tag0_cmp:
x86IR::  	movl $1 var_14
x86IR::  	ir_tag0_cmpend:
x86IR::  	cmpl $0 var_14
x86IR::  	je ir_tag_else_1
x86IR::  	pushl expl_0
x86IR::  	call project_int
x86IR::  	movl eax var_3
x86IR::  	pushl var_3
x86IR::  	call print_int_nl
x86IR::  	jmp ir_tag_end_1
x86IR::  	ir_tag_else_1:
x86IR::  	pushl expl_0
x86IR::  	call tag
x86IR::  	movl eax var_11
x86IR::  	cmpl $1 var_11
x86IR::  	je ir_tag2_cmp
x86IR::  	movl $0 var_10
x86IR::  	jmp ir_tag2_cmpend
x86IR::  	ir_tag2_cmp:
x86IR::  	movl $1 var_10
x86IR::  	ir_tag2_cmpend:
x86IR::  	cmpl $0 var_10
x86IR::  	je ir_tag_else_3
x86IR::  	pushl expl_0
x86IR::  	call inject_bool
x86IR::  	movl eax var_4
x86IR::  	pushl var_4
x86IR::  	call print_any
x86IR::  	jmp ir_tag_end_3
x86IR::  	ir_tag_else_3:
x86IR::  	pushl expl_0
x86IR::  	call tag
x86IR::  	movl eax var_7
x86IR::  	cmpl $3 var_7
x86IR::  	je ir_tag4_cmp
x86IR::  	movl $0 var_6
x86IR::  	jmp ir_tag4_cmpend
x86IR::  	ir_tag4_cmp:
x86IR::  	movl $1 var_6
x86IR::  	ir_tag4_cmpend:
x86IR::  	cmpl $0 var_6
x86IR::  	je ir_tag_else_5
x86IR::  	pushl expl_0
x86IR::  	call print_any
x86IR::  	jmp ir_tag_end_5
x86IR::  	ir_tag_else_5:
x86IR::  	call call_error
x86IR::  	pushl eax
x86IR::  	call inject_int
x86IR::  	movl eax var_5
x86IR::  	jmp ir_tag_end_5
x86IR::  	ir_tag_end_5:
x86IR::  	jmp ir_tag_end_3
x86IR::  	ir_tag_end_3:
x86IR::  	jmp ir_tag_end_1
x86IR::  	ir_tag_end_1:
x86IR::  	movl None var_1
x86IR::  	pushl $222
x86IR::  	call inject_int
x86IR::  	movl eax edx
x86IR::  	pushl $3
x86IR::  	call inject_int
x86IR::  	pushl edx
x86IR::  	pushl eax
x86IR::  	pushl user_x
x86IR::  	call set_subscript
VariableGraph::  # of variables: 18
VariableGraph::  Assigned None to esi
VariableGraph::  Assigned var_14 to eax
VariableGraph::  Assigned expl_0 to ebx
VariableGraph::  Assigned ecx to ecx
VariableGraph::  Assigned var_11 to eax
VariableGraph::  Assigned user_False to esi
VariableGraph::  Assigned var_3 to eax
VariableGraph::  Assigned var_10 to eax
VariableGraph::  Assigned var_15 to eax
VariableGraph::  Assigned var_5 to eax
VariableGraph::  Assigned eax to eax
VariableGraph::  Assigned user_True to esi
VariableGraph::  Assigned var_7 to eax
VariableGraph::  Assigned var_6 to eax
VariableGraph::  Assigned user_x to edi
VariableGraph::  Assigned var_4 to eax
VariableGraph::  Assigned ebx to ecx
VariableGraph::  Assigned edx to edx
VariableGraph::  Assigned var_1 to eax
VariableGraph::  Assigned var_0 to edi
