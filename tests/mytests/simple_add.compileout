compiler:: base tree:
compiler::	Assign([AssName('x', 'OP_ASSIGN')], Add((Const(1), Const(2))))
explicate:: Explicated Tree:
Module(None, Stmt([Assign([AssName('x', 'OP_ASSIGN')], Let(Name('expl_1'), Const(1), Let(Name('expl_2'), Const(2), IfExp(InjectFrom(bool, And([Or([Compare(Const(0), [('==', GetTag(Name('expl_1')))]), Compare(Const(1), [('==', GetTag(Name('expl_1')))])]), Or([Compare(Const(0), [('==', GetTag(Name('expl_2')))]), Compare(Const(1), [('==', GetTag(Name('expl_2')))])])])), Assign([Name('expl_0')], InjectFrom(int, Add((IfExp(InjectFrom(bool, Compare(Const(0), [('==', GetTag(Name('expl_1')))])), ProjectTo(int, Name('expl_1')), ProjectTo(bool, Name('expl_1'))), IfExp(InjectFrom(bool, Compare(Const(0), [('==', GetTag(Name('expl_2')))])), ProjectTo(int, Name('expl_2')), ProjectTo(bool, Name('expl_2'))))))), IfExp(InjectFrom(bool, And([Compare(Const(3), [('==', GetTag(Name('expl_1')))]), Compare(Const(3), [('==', GetTag(Name('expl_2')))])])), Assign([Name('expl_0')], InjectFrom(big, CallBigAdd(ProjectTo(big, Name('expl_1')), ProjectTo(big, Name('expl_2'))))), CallFunc(Name('call_error'), [], None, None))))))]))
Flatten:: Flattened AST tree:
Flatten:: 	Let(Name('expl_1'), Const(1), Stmt([Let(Name('expl_2'), Const(2), Stmt([Assign([AssName('var_47', 'OP-ASSIGN')], GetTag(Name('expl_1'))), Assign([AssName('var_46', 'OP-ASSIGN')], Compare(Const(0), [('==', Name('var_47'))])), Assign([AssName('var_50', 'OP-ASSIGN')], GetTag(Name('expl_1'))), Assign([AssName('var_49', 'OP-ASSIGN')], Compare(Const(1), [('==', Name('var_50'))])), Assign([AssName('var_45', 'OP-ASSIGN')], Or([Name('var_46'), Name('var_49')])), Assign([AssName('var_55', 'OP-ASSIGN')], GetTag(Name('expl_2'))), Assign([AssName('var_54', 'OP-ASSIGN')], Compare(Const(0), [('==', Name('var_55'))])), Assign([AssName('var_58', 'OP-ASSIGN')], GetTag(Name('expl_2'))), Assign([AssName('var_57', 'OP-ASSIGN')], Compare(Const(1), [('==', Name('var_58'))])), Assign([AssName('var_53', 'OP-ASSIGN')], Or([Name('var_54'), Name('var_57')])), Assign([AssName('var_44', 'OP-ASSIGN')], And([Name('var_45'), Name('var_53')])), Assign([AssName('var_43', 'OP-ASSIGN')], InjectFrom(bool, Name('var_44'))), Assign([AssName('var_63', 'OP-ASSIGN')], GetTag(Name('var_43'))), Assign([AssName('var_63', 'OP-ASSIGN')], Compare(Const(0), [('==', Name('var_63'))])), IfExp(Name('var_63'), Stmt([Assign([AssName('var_43', 'OP-ASSIGN')], ProjectTo(int, Name('var_43')))]), Stmt([Assign([AssName('var_43', 'OP-ASSIGN')], ProjectTo(bool, Name('var_43')))])), IfExp(Name('var_43'), Stmt([Assign([AssName('var_7', 'OP-ASSIGN')], GetTag(Name('expl_1'))), Assign([AssName('var_6', 'OP-ASSIGN')], Compare(Const(0), [('==', Name('var_7'))])), Assign([AssName('var_5', 'OP-ASSIGN')], InjectFrom(bool, Name('var_6'))), Assign([AssName('var_10', 'OP-ASSIGN')], GetTag(Name('var_5'))), Assign([AssName('var_10', 'OP-ASSIGN')], Compare(Const(0), [('==', Name('var_10'))])), IfExp(Name('var_10'), Stmt([Assign([AssName('var_5', 'OP-ASSIGN')], ProjectTo(int, Name('var_5')))]), Stmt([Assign([AssName('var_5', 'OP-ASSIGN')], ProjectTo(bool, Name('var_5')))])), IfExp(Name('var_5'), Stmt([Assign([AssName('var_2', 'OP-ASSIGN')], ProjectTo(int, Name('expl_1'))), Assign([AssName('var_2', 'OP-ASSIGN')], Name('var_2'))]), Stmt([Assign([AssName('var_3', 'OP-ASSIGN')], ProjectTo(bool, Name('expl_1'))), Assign([AssName('var_2', 'OP-ASSIGN')], Name('var_3'))])), Assign([AssName('var_17', 'OP-ASSIGN')], GetTag(Name('expl_2'))), Assign([AssName('var_16', 'OP-ASSIGN')], Compare(Const(0), [('==', Name('var_17'))])), Assign([AssName('var_15', 'OP-ASSIGN')], InjectFrom(bool, Name('var_16'))), Assign([AssName('var_20', 'OP-ASSIGN')], GetTag(Name('var_15'))), Assign([AssName('var_20', 'OP-ASSIGN')], Compare(Const(0), [('==', Name('var_20'))])), IfExp(Name('var_20'), Stmt([Assign([AssName('var_15', 'OP-ASSIGN')], ProjectTo(int, Name('var_15')))]), Stmt([Assign([AssName('var_15', 'OP-ASSIGN')], ProjectTo(bool, Name('var_15')))])), IfExp(Name('var_15'), Stmt([Assign([AssName('var_12', 'OP-ASSIGN')], ProjectTo(int, Name('expl_2'))), Assign([AssName('var_12', 'OP-ASSIGN')], Name('var_12'))]), Stmt([Assign([AssName('var_13', 'OP-ASSIGN')], ProjectTo(bool, Name('expl_2'))), Assign([AssName('var_12', 'OP-ASSIGN')], Name('var_13'))])), Assign([AssName('var_1', 'OP-ASSIGN')], Add((Name('var_2'), Name('var_12')))), Assign([AssName('var_0', 'OP-ASSIGN')], InjectFrom(int, Name('var_1'))), Assign([Name('expl_0')], Name('var_0')), Assign([AssName('var_0', 'OP-ASSIGN')], Name('expl_0'))]), Stmt([Assign([AssName('var_34', 'OP-ASSIGN')], GetTag(Name('expl_1'))), Assign([AssName('var_33', 'OP-ASSIGN')], Compare(Const(3), [('==', Name('var_34'))])), Assign([AssName('var_37', 'OP-ASSIGN')], GetTag(Name('expl_2'))), Assign([AssName('var_36', 'OP-ASSIGN')], Compare(Const(3), [('==', Name('var_37'))])), Assign([AssName('var_32', 'OP-ASSIGN')], And([Name('var_33'), Name('var_36')])), Assign([AssName('var_31', 'OP-ASSIGN')], InjectFrom(bool, Name('var_32'))), Assign([AssName('var_41', 'OP-ASSIGN')], GetTag(Name('var_31'))), Assign([AssName('var_41', 'OP-ASSIGN')], Compare(Const(0), [('==', Name('var_41'))])), IfExp(Name('var_41'), Stmt([Assign([AssName('var_31', 'OP-ASSIGN')], ProjectTo(int, Name('var_31')))]), Stmt([Assign([AssName('var_31', 'OP-ASSIGN')], ProjectTo(bool, Name('var_31')))])), IfExp(Name('var_31'), Stmt([Assign([AssName('var_25', 'OP-ASSIGN')], ProjectTo(big, Name('expl_1'))), Assign([AssName('var_27', 'OP-ASSIGN')], ProjectTo(big, Name('expl_2'))), Assign([AssName('var_24', 'OP-ASSIGN')], CallBigAdd(Name('var_25'), Name('var_27'))), Assign([AssName('var_23', 'OP-ASSIGN')], InjectFrom(big, Name('var_24'))), Assign([Name('expl_0')], Name('var_23')), Assign([AssName('var_23', 'OP-ASSIGN')], Name('expl_0')), Assign([AssName('var_0', 'OP-ASSIGN')], Name('var_23'))]), Stmt([Assign([AssName('var_30', 'OP-ASSIGN')], CallFunc(Name('call_error'), [], None, None)), Assign([AssName('var_23', 'OP-ASSIGN')], Name('var_30')), Assign([AssName('var_0', 'OP-ASSIGN')], Name('var_23'))]))]))])), Assign([AssName('var_0', 'OP-ASSIGN')], Name('expl_0'))]))
Flatten:: 	Assign([AssName('var_0', 'OP-ASSIGN')], Name('expl_0'))
Flatten:: 	Assign([AssName('user_x', 'OP_ASSIGN')], Name('var_0'))
x86IR::  Intermediate representation:
x86IR::  	pushl $1
x86IR::  	call inject_int
x86IR::  	movl eax expl_1
x86IR::  	pushl $2
x86IR::  	call inject_int
x86IR::  	movl eax expl_2
x86IR::  	pushl expl_1
x86IR::  	call tag
x86IR::  	movl eax var_47
x86IR::  	cmpl $0 var_47
x86IR::  	je ir_tag0_cmp
x86IR::  	movl $0 var_46
x86IR::  	jmp ir_tag0_cmpend
x86IR::  	ir_tag0_cmp:
x86IR::  	movl $1 var_46
x86IR::  	ir_tag0_cmpend:
x86IR::  	pushl expl_1
x86IR::  	call tag
x86IR::  	movl eax var_50
x86IR::  	cmpl $1 var_50
x86IR::  	je ir_tag1_cmp
x86IR::  	movl $0 var_49
x86IR::  	jmp ir_tag1_cmpend
x86IR::  	ir_tag1_cmp:
x86IR::  	movl $1 var_49
x86IR::  	ir_tag1_cmpend:
x86IR::  	movl var_46 var_45
x86IR::  	orl var_49 var_45
x86IR::  	pushl expl_2
x86IR::  	call tag
x86IR::  	movl eax var_55
x86IR::  	cmpl $0 var_55
x86IR::  	je ir_tag2_cmp
x86IR::  	movl $0 var_54
x86IR::  	jmp ir_tag2_cmpend
x86IR::  	ir_tag2_cmp:
x86IR::  	movl $1 var_54
x86IR::  	ir_tag2_cmpend:
x86IR::  	pushl expl_2
x86IR::  	call tag
x86IR::  	movl eax var_58
x86IR::  	cmpl $1 var_58
x86IR::  	je ir_tag3_cmp
x86IR::  	movl $0 var_57
x86IR::  	jmp ir_tag3_cmpend
x86IR::  	ir_tag3_cmp:
x86IR::  	movl $1 var_57
x86IR::  	ir_tag3_cmpend:
x86IR::  	movl var_54 var_53
x86IR::  	orl var_57 var_53
x86IR::  	movl var_45 var_44
x86IR::  	andl var_53 var_44
x86IR::  	pushl var_44
x86IR::  	call inject_bool
x86IR::  	movl eax var_43
x86IR::  	pushl var_43
x86IR::  	call tag
x86IR::  	movl eax var_63
x86IR::  	cmpl $0 var_63
x86IR::  	je ir_tag4_cmp
x86IR::  	movl $0 var_63
x86IR::  	jmp ir_tag4_cmpend
x86IR::  	ir_tag4_cmp:
x86IR::  	movl $1 var_63
x86IR::  	ir_tag4_cmpend:
x86IR::  	cmpl $0 var_63
x86IR::  	je ir_tag_else_5
x86IR::  	pushl var_43
x86IR::  	call project_int
x86IR::  	movl eax var_43
x86IR::  	jmp ir_tag_end_5
x86IR::  	ir_tag_else_5:
x86IR::  	pushl var_43
x86IR::  	call project_bool
x86IR::  	movl eax var_43
x86IR::  	jmp ir_tag_end_5
x86IR::  	ir_tag_end_5:
x86IR::  	cmpl $0 var_43
x86IR::  	je ir_tag_else_6
x86IR::  	pushl expl_1
x86IR::  	call tag
x86IR::  	movl eax var_7
x86IR::  	cmpl $0 var_7
x86IR::  	je ir_tag7_cmp
x86IR::  	movl $0 var_6
x86IR::  	jmp ir_tag7_cmpend
x86IR::  	ir_tag7_cmp:
x86IR::  	movl $1 var_6
x86IR::  	ir_tag7_cmpend:
x86IR::  	pushl var_6
x86IR::  	call inject_bool
x86IR::  	movl eax var_5
x86IR::  	pushl var_5
x86IR::  	call tag
x86IR::  	movl eax var_10
x86IR::  	cmpl $0 var_10
x86IR::  	je ir_tag8_cmp
x86IR::  	movl $0 var_10
x86IR::  	jmp ir_tag8_cmpend
x86IR::  	ir_tag8_cmp:
x86IR::  	movl $1 var_10
x86IR::  	ir_tag8_cmpend:
x86IR::  	cmpl $0 var_10
x86IR::  	je ir_tag_else_9
x86IR::  	pushl var_5
x86IR::  	call project_int
x86IR::  	movl eax var_5
x86IR::  	jmp ir_tag_end_9
x86IR::  	ir_tag_else_9:
x86IR::  	pushl var_5
x86IR::  	call project_bool
x86IR::  	movl eax var_5
x86IR::  	jmp ir_tag_end_9
x86IR::  	ir_tag_end_9:
x86IR::  	cmpl $0 var_5
x86IR::  	je ir_tag_else_10
x86IR::  	pushl expl_1
x86IR::  	call project_int
x86IR::  	movl eax var_2
x86IR::  	movl var_2 var_2
x86IR::  	jmp ir_tag_end_10
x86IR::  	ir_tag_else_10:
x86IR::  	pushl expl_1
x86IR::  	call project_bool
x86IR::  	movl eax var_3
x86IR::  	movl var_3 var_2
x86IR::  	jmp ir_tag_end_10
x86IR::  	ir_tag_end_10:
x86IR::  	pushl expl_2
x86IR::  	call tag
x86IR::  	movl eax var_17
x86IR::  	cmpl $0 var_17
x86IR::  	je ir_tag11_cmp
x86IR::  	movl $0 var_16
x86IR::  	jmp ir_tag11_cmpend
x86IR::  	ir_tag11_cmp:
x86IR::  	movl $1 var_16
x86IR::  	ir_tag11_cmpend:
x86IR::  	pushl var_16
x86IR::  	call inject_bool
x86IR::  	movl eax var_15
x86IR::  	pushl var_15
x86IR::  	call tag
x86IR::  	movl eax var_20
x86IR::  	cmpl $0 var_20
x86IR::  	je ir_tag12_cmp
x86IR::  	movl $0 var_20
x86IR::  	jmp ir_tag12_cmpend
x86IR::  	ir_tag12_cmp:
x86IR::  	movl $1 var_20
x86IR::  	ir_tag12_cmpend:
x86IR::  	cmpl $0 var_20
x86IR::  	je ir_tag_else_13
x86IR::  	pushl var_15
x86IR::  	call project_int
x86IR::  	movl eax var_15
x86IR::  	jmp ir_tag_end_13
x86IR::  	ir_tag_else_13:
x86IR::  	pushl var_15
x86IR::  	call project_bool
x86IR::  	movl eax var_15
x86IR::  	jmp ir_tag_end_13
x86IR::  	ir_tag_end_13:
x86IR::  	cmpl $0 var_15
x86IR::  	je ir_tag_else_14
x86IR::  	pushl expl_2
x86IR::  	call project_int
x86IR::  	movl eax var_12
x86IR::  	movl var_12 var_12
x86IR::  	jmp ir_tag_end_14
x86IR::  	ir_tag_else_14:
x86IR::  	pushl expl_2
x86IR::  	call project_bool
x86IR::  	movl eax var_13
x86IR::  	movl var_13 var_12
x86IR::  	jmp ir_tag_end_14
x86IR::  	ir_tag_end_14:
x86IR::  	movl var_2 var_1
x86IR::  	addl var_12 var_1
x86IR::  	pushl var_1
x86IR::  	call inject_int
x86IR::  	movl eax var_0
x86IR::  	movl var_0 expl_0
x86IR::  	movl expl_0 var_0
x86IR::  	jmp ir_tag_end_6
x86IR::  	ir_tag_else_6:
x86IR::  	pushl expl_1
x86IR::  	call tag
x86IR::  	movl eax var_34
x86IR::  	cmpl $3 var_34
x86IR::  	je ir_tag15_cmp
x86IR::  	movl $0 var_33
x86IR::  	jmp ir_tag15_cmpend
x86IR::  	ir_tag15_cmp:
x86IR::  	movl $1 var_33
x86IR::  	ir_tag15_cmpend:
x86IR::  	pushl expl_2
x86IR::  	call tag
x86IR::  	movl eax var_37
x86IR::  	cmpl $3 var_37
x86IR::  	je ir_tag16_cmp
x86IR::  	movl $0 var_36
x86IR::  	jmp ir_tag16_cmpend
x86IR::  	ir_tag16_cmp:
x86IR::  	movl $1 var_36
x86IR::  	ir_tag16_cmpend:
x86IR::  	movl var_33 var_32
x86IR::  	andl var_36 var_32
x86IR::  	pushl var_32
x86IR::  	call inject_bool
x86IR::  	movl eax var_31
x86IR::  	pushl var_31
x86IR::  	call tag
x86IR::  	movl eax var_41
x86IR::  	cmpl $0 var_41
x86IR::  	je ir_tag17_cmp
x86IR::  	movl $0 var_41
x86IR::  	jmp ir_tag17_cmpend
x86IR::  	ir_tag17_cmp:
x86IR::  	movl $1 var_41
x86IR::  	ir_tag17_cmpend:
x86IR::  	cmpl $0 var_41
x86IR::  	je ir_tag_else_18
x86IR::  	pushl var_31
x86IR::  	call project_int
x86IR::  	movl eax var_31
x86IR::  	jmp ir_tag_end_18
x86IR::  	ir_tag_else_18:
x86IR::  	pushl var_31
x86IR::  	call project_bool
x86IR::  	movl eax var_31
x86IR::  	jmp ir_tag_end_18
x86IR::  	ir_tag_end_18:
x86IR::  	cmpl $0 var_31
x86IR::  	je ir_tag_else_19
x86IR::  	pushl expl_1
x86IR::  	call project_big
x86IR::  	movl eax var_25
x86IR::  	pushl expl_2
x86IR::  	call project_big
x86IR::  	movl eax var_27
x86IR::  	pushl var_27
x86IR::  	pushl var_25
x86IR::  	call add
x86IR::  	movl eax var_24
x86IR::  	pushl var_24
x86IR::  	call inject_big
x86IR::  	movl eax var_23
x86IR::  	movl var_23 expl_0
x86IR::  	movl expl_0 var_23
x86IR::  	movl var_23 var_0
x86IR::  	jmp ir_tag_end_19
x86IR::  	ir_tag_else_19:
x86IR::  	call call_error
x86IR::  	pushl eax
x86IR::  	call inject_int
x86IR::  	movl eax var_30
x86IR::  	movl var_30 var_23
x86IR::  	movl var_23 var_0
x86IR::  	jmp ir_tag_end_19
x86IR::  	ir_tag_end_19:
x86IR::  	jmp ir_tag_end_6
x86IR::  	ir_tag_end_6:
x86IR::  	movl expl_0 var_0
x86IR::  	movl expl_0 var_0
x86IR::  	movl var_0 user_x
VariableGraph::  # of variables: 43
