compiler:: base tree:
compiler::	Assign([AssName('x', 'OP_ASSIGN')], List([Const(1), Const(2), Const(3)]))
compiler::	Assign([AssName('y', 'OP_ASSIGN')], Name('x'))
compiler::	Assign([AssName('z', 'OP_ASSIGN')], Add((Name('x'), List([Subscript(Name('y'), 'OP_APPLY', [Const(2)])]))))
explicate:: Explicated Tree:
Module(None, Stmt([Assign([AssName('x', 'OP_ASSIGN')], List([Const(1), Const(2), Const(3)])), Assign([AssName('y', 'OP_ASSIGN')], Name('x')), Assign([AssName('z', 'OP_ASSIGN')], Let(Name('expl_1'), Name('x'), Let(Name('expl_2'), List([Subscript(Name('y'), 'OP_APPLY', [Const(2)])]), IfExp(InjectFrom(bool, And([Or([Compare(Const(0), [('==', GetTag(Name('expl_1')))]), Compare(Const(1), [('==', GetTag(Name('expl_1')))])]), Or([Compare(Const(0), [('==', GetTag(Name('expl_2')))]), Compare(Const(1), [('==', GetTag(Name('expl_2')))])])])), Assign([Name('expl_0')], InjectFrom(int, Add((IfExp(InjectFrom(bool, Compare(Const(0), [('==', GetTag(Name('expl_1')))])), ProjectTo(int, Name('expl_1')), ProjectTo(bool, Name('expl_1'))), IfExp(InjectFrom(bool, Compare(Const(0), [('==', GetTag(Name('expl_2')))])), ProjectTo(int, Name('expl_2')), ProjectTo(bool, Name('expl_2'))))))), IfExp(InjectFrom(bool, And([Compare(Const(3), [('==', GetTag(Name('expl_1')))]), Compare(Const(3), [('==', GetTag(Name('expl_2')))])])), Assign([Name('expl_0')], InjectFrom(big, CallBigAdd(ProjectTo(big, Name('expl_1')), ProjectTo(big, Name('expl_2'))))), CallFunc(Name('call_error'), [], None, None))))))]))
Flatten:: Flattened AST tree:
Flatten:: 	Assign([AssName('var_0', 'OP-ASSIGN')], List([Const(1), Const(2), Const(3)]))
Flatten:: 	Assign([AssName('user_x', 'OP_ASSIGN')], Name('var_0'))
Flatten:: 	Assign([AssName('user_y', 'OP_ASSIGN')], Name('user_x'))
Flatten:: 	Let(Name('expl_1'), Name('user_x'), Stmt([Assign([AssName('var_2', 'OP-ASSIGN')], Subscript(Name('user_y'), 'OP_APPLY', [Const(2)])), Assign([AssName('var_1', 'OP-ASSIGN')], List([Name('var_2')])), Let(Name('expl_2'), Name('var_1'), Stmt([Assign([AssName('var_52', 'OP-ASSIGN')], GetTag(Name('expl_1'))), Assign([AssName('var_51', 'OP-ASSIGN')], Compare(Const(0), [('==', Name('var_52'))])), Assign([AssName('var_55', 'OP-ASSIGN')], GetTag(Name('expl_1'))), Assign([AssName('var_54', 'OP-ASSIGN')], Compare(Const(1), [('==', Name('var_55'))])), Assign([AssName('var_50', 'OP-ASSIGN')], Or([Name('var_51'), Name('var_54')])), Assign([AssName('var_60', 'OP-ASSIGN')], GetTag(Name('expl_2'))), Assign([AssName('var_59', 'OP-ASSIGN')], Compare(Const(0), [('==', Name('var_60'))])), Assign([AssName('var_63', 'OP-ASSIGN')], GetTag(Name('expl_2'))), Assign([AssName('var_62', 'OP-ASSIGN')], Compare(Const(1), [('==', Name('var_63'))])), Assign([AssName('var_58', 'OP-ASSIGN')], Or([Name('var_59'), Name('var_62')])), Assign([AssName('var_49', 'OP-ASSIGN')], And([Name('var_50'), Name('var_58')])), Assign([AssName('var_48', 'OP-ASSIGN')], InjectFrom(bool, Name('var_49'))), Assign([AssName('var_68', 'OP-ASSIGN')], GetTag(Name('var_48'))), Assign([AssName('var_68', 'OP-ASSIGN')], Compare(Const(0), [('==', Name('var_68'))])), IfExp(Name('var_68'), Stmt([Assign([AssName('var_48', 'OP-ASSIGN')], ProjectTo(int, Name('var_48')))]), Stmt([Assign([AssName('var_48', 'OP-ASSIGN')], ProjectTo(bool, Name('var_48')))])), IfExp(Name('var_48'), Stmt([Assign([AssName('var_12', 'OP-ASSIGN')], GetTag(Name('expl_1'))), Assign([AssName('var_11', 'OP-ASSIGN')], Compare(Const(0), [('==', Name('var_12'))])), Assign([AssName('var_10', 'OP-ASSIGN')], InjectFrom(bool, Name('var_11'))), Assign([AssName('var_15', 'OP-ASSIGN')], GetTag(Name('var_10'))), Assign([AssName('var_15', 'OP-ASSIGN')], Compare(Const(0), [('==', Name('var_15'))])), IfExp(Name('var_15'), Stmt([Assign([AssName('var_10', 'OP-ASSIGN')], ProjectTo(int, Name('var_10')))]), Stmt([Assign([AssName('var_10', 'OP-ASSIGN')], ProjectTo(bool, Name('var_10')))])), IfExp(Name('var_10'), Stmt([Assign([AssName('var_7', 'OP-ASSIGN')], ProjectTo(int, Name('expl_1'))), Assign([AssName('var_7', 'OP-ASSIGN')], Name('var_7'))]), Stmt([Assign([AssName('var_8', 'OP-ASSIGN')], ProjectTo(bool, Name('expl_1'))), Assign([AssName('var_7', 'OP-ASSIGN')], Name('var_8'))])), Assign([AssName('var_22', 'OP-ASSIGN')], GetTag(Name('expl_2'))), Assign([AssName('var_21', 'OP-ASSIGN')], Compare(Const(0), [('==', Name('var_22'))])), Assign([AssName('var_20', 'OP-ASSIGN')], InjectFrom(bool, Name('var_21'))), Assign([AssName('var_25', 'OP-ASSIGN')], GetTag(Name('var_20'))), Assign([AssName('var_25', 'OP-ASSIGN')], Compare(Const(0), [('==', Name('var_25'))])), IfExp(Name('var_25'), Stmt([Assign([AssName('var_20', 'OP-ASSIGN')], ProjectTo(int, Name('var_20')))]), Stmt([Assign([AssName('var_20', 'OP-ASSIGN')], ProjectTo(bool, Name('var_20')))])), IfExp(Name('var_20'), Stmt([Assign([AssName('var_17', 'OP-ASSIGN')], ProjectTo(int, Name('expl_2'))), Assign([AssName('var_17', 'OP-ASSIGN')], Name('var_17'))]), Stmt([Assign([AssName('var_18', 'OP-ASSIGN')], ProjectTo(bool, Name('expl_2'))), Assign([AssName('var_17', 'OP-ASSIGN')], Name('var_18'))])), Assign([AssName('var_6', 'OP-ASSIGN')], Add((Name('var_7'), Name('var_17')))), Assign([AssName('var_5', 'OP-ASSIGN')], InjectFrom(int, Name('var_6'))), Assign([Name('expl_0')], Name('var_5')), Assign([AssName('var_5', 'OP-ASSIGN')], Name('expl_0'))]), Stmt([Assign([AssName('var_39', 'OP-ASSIGN')], GetTag(Name('expl_1'))), Assign([AssName('var_38', 'OP-ASSIGN')], Compare(Const(3), [('==', Name('var_39'))])), Assign([AssName('var_42', 'OP-ASSIGN')], GetTag(Name('expl_2'))), Assign([AssName('var_41', 'OP-ASSIGN')], Compare(Const(3), [('==', Name('var_42'))])), Assign([AssName('var_37', 'OP-ASSIGN')], And([Name('var_38'), Name('var_41')])), Assign([AssName('var_36', 'OP-ASSIGN')], InjectFrom(bool, Name('var_37'))), Assign([AssName('var_46', 'OP-ASSIGN')], GetTag(Name('var_36'))), Assign([AssName('var_46', 'OP-ASSIGN')], Compare(Const(0), [('==', Name('var_46'))])), IfExp(Name('var_46'), Stmt([Assign([AssName('var_36', 'OP-ASSIGN')], ProjectTo(int, Name('var_36')))]), Stmt([Assign([AssName('var_36', 'OP-ASSIGN')], ProjectTo(bool, Name('var_36')))])), IfExp(Name('var_36'), Stmt([Assign([AssName('var_30', 'OP-ASSIGN')], ProjectTo(big, Name('expl_1'))), Assign([AssName('var_32', 'OP-ASSIGN')], ProjectTo(big, Name('expl_2'))), Assign([AssName('var_29', 'OP-ASSIGN')], CallBigAdd(Name('var_30'), Name('var_32'))), Assign([AssName('var_28', 'OP-ASSIGN')], InjectFrom(big, Name('var_29'))), Assign([Name('expl_0')], Name('var_28')), Assign([AssName('var_28', 'OP-ASSIGN')], Name('expl_0')), Assign([AssName('var_5', 'OP-ASSIGN')], Name('var_28'))]), Stmt([Assign([AssName('var_35', 'OP-ASSIGN')], CallFunc(Name('call_error'), [], None, None)), Assign([AssName('var_28', 'OP-ASSIGN')], Name('var_35')), Assign([AssName('var_5', 'OP-ASSIGN')], Name('var_28'))]))]))])), Assign([AssName('var_1', 'OP-ASSIGN')], Name('expl_0'))]))
Flatten:: 	Assign([AssName('var_1', 'OP-ASSIGN')], Name('expl_0'))
Flatten:: 	Assign([AssName('user_z', 'OP_ASSIGN')], Name('var_1'))
x86IR::  Intermediate representation:
x86IR::  	pushl $3
x86IR::  	call inject_int
x86IR::  	pushl eax
x86IR::  	call create_list
x86IR::  	pushl eax
x86IR::  	call inject_big
x86IR::  	movl eax var_0
x86IR::  	pushl $0
x86IR::  	call inject_int
x86IR::  	movl eax ebx
x86IR::  	pushl $1
x86IR::  	call inject_int
x86IR::  	pushl eax
x86IR::  	pushl ebx
x86IR::  	pushl var_0
x86IR::  	call set_subscript
x86IR::  	pushl $1
x86IR::  	call inject_int
x86IR::  	movl eax ebx
x86IR::  	pushl $2
x86IR::  	call inject_int
x86IR::  	pushl eax
x86IR::  	pushl ebx
x86IR::  	pushl var_0
x86IR::  	call set_subscript
x86IR::  	pushl $2
x86IR::  	call inject_int
x86IR::  	movl eax ebx
x86IR::  	pushl $3
x86IR::  	call inject_int
x86IR::  	pushl eax
x86IR::  	pushl ebx
x86IR::  	pushl var_0
x86IR::  	call set_subscript
x86IR::  	movl var_0 user_x
x86IR::  	movl user_x user_y
x86IR::  	movl user_x expl_1
x86IR::  	pushl $2
x86IR::  	call inject_int
x86IR::  	pushl eax
x86IR::  	pushl user_y
x86IR::  	call get_subscript
x86IR::  	movl eax var_2
x86IR::  	pushl $1
x86IR::  	call inject_int
x86IR::  	pushl eax
x86IR::  	call create_list
x86IR::  	pushl eax
x86IR::  	call inject_big
x86IR::  	movl eax var_1
x86IR::  	pushl $0
x86IR::  	call inject_int
x86IR::  	movl eax ebx
x86IR::  	pushl var_2
x86IR::  	pushl ebx
x86IR::  	pushl var_1
x86IR::  	call set_subscript
x86IR::  	movl var_1 expl_2
x86IR::  	pushl expl_1
x86IR::  	call tag
x86IR::  	movl eax var_52
x86IR::  	cmpl $0 var_52
x86IR::  	je ir_tag0_cmp
x86IR::  	movl $0 var_51
x86IR::  	jmp ir_tag0_cmpend
x86IR::  	ir_tag0_cmp:
x86IR::  	movl $1 var_51
x86IR::  	ir_tag0_cmpend:
x86IR::  	pushl expl_1
x86IR::  	call tag
x86IR::  	movl eax var_55
x86IR::  	cmpl $1 var_55
x86IR::  	je ir_tag1_cmp
x86IR::  	movl $0 var_54
x86IR::  	jmp ir_tag1_cmpend
x86IR::  	ir_tag1_cmp:
x86IR::  	movl $1 var_54
x86IR::  	ir_tag1_cmpend:
x86IR::  	movl var_51 var_50
x86IR::  	orl var_54 var_50
x86IR::  	pushl expl_2
x86IR::  	call tag
x86IR::  	movl eax var_60
x86IR::  	cmpl $0 var_60
x86IR::  	je ir_tag2_cmp
x86IR::  	movl $0 var_59
x86IR::  	jmp ir_tag2_cmpend
x86IR::  	ir_tag2_cmp:
x86IR::  	movl $1 var_59
x86IR::  	ir_tag2_cmpend:
x86IR::  	pushl expl_2
x86IR::  	call tag
x86IR::  	movl eax var_63
x86IR::  	cmpl $1 var_63
x86IR::  	je ir_tag3_cmp
x86IR::  	movl $0 var_62
x86IR::  	jmp ir_tag3_cmpend
x86IR::  	ir_tag3_cmp:
x86IR::  	movl $1 var_62
x86IR::  	ir_tag3_cmpend:
x86IR::  	movl var_59 var_58
x86IR::  	orl var_62 var_58
x86IR::  	movl var_50 var_49
x86IR::  	andl var_58 var_49
x86IR::  	pushl var_49
x86IR::  	call inject_bool
x86IR::  	movl eax var_48
x86IR::  	pushl var_48
x86IR::  	call tag
x86IR::  	movl eax var_68
x86IR::  	cmpl $0 var_68
x86IR::  	je ir_tag4_cmp
x86IR::  	movl $0 var_68
x86IR::  	jmp ir_tag4_cmpend
x86IR::  	ir_tag4_cmp:
x86IR::  	movl $1 var_68
x86IR::  	ir_tag4_cmpend:
x86IR::  	cmpl $0 var_68
x86IR::  	je ir_tag_else_5
x86IR::  	pushl var_48
x86IR::  	call project_int
x86IR::  	movl eax var_48
x86IR::  	jmp ir_tag_end_5
x86IR::  	ir_tag_else_5:
x86IR::  	pushl var_48
x86IR::  	call project_bool
x86IR::  	movl eax var_48
x86IR::  	jmp ir_tag_end_5
x86IR::  	ir_tag_end_5:
x86IR::  	cmpl $0 var_48
x86IR::  	je ir_tag_else_6
x86IR::  	pushl expl_1
x86IR::  	call tag
x86IR::  	movl eax var_12
x86IR::  	cmpl $0 var_12
x86IR::  	je ir_tag7_cmp
x86IR::  	movl $0 var_11
x86IR::  	jmp ir_tag7_cmpend
x86IR::  	ir_tag7_cmp:
x86IR::  	movl $1 var_11
x86IR::  	ir_tag7_cmpend:
x86IR::  	pushl var_11
x86IR::  	call inject_bool
x86IR::  	movl eax var_10
x86IR::  	pushl var_10
x86IR::  	call tag
x86IR::  	movl eax var_15
x86IR::  	cmpl $0 var_15
x86IR::  	je ir_tag8_cmp
x86IR::  	movl $0 var_15
x86IR::  	jmp ir_tag8_cmpend
x86IR::  	ir_tag8_cmp:
x86IR::  	movl $1 var_15
x86IR::  	ir_tag8_cmpend:
x86IR::  	cmpl $0 var_15
x86IR::  	je ir_tag_else_9
x86IR::  	pushl var_10
x86IR::  	call project_int
x86IR::  	movl eax var_10
x86IR::  	jmp ir_tag_end_9
x86IR::  	ir_tag_else_9:
x86IR::  	pushl var_10
x86IR::  	call project_bool
x86IR::  	movl eax var_10
x86IR::  	jmp ir_tag_end_9
x86IR::  	ir_tag_end_9:
x86IR::  	cmpl $0 var_10
x86IR::  	je ir_tag_else_10
x86IR::  	pushl expl_1
x86IR::  	call project_int
x86IR::  	movl eax var_7
x86IR::  	movl var_7 var_7
x86IR::  	jmp ir_tag_end_10
x86IR::  	ir_tag_else_10:
x86IR::  	pushl expl_1
x86IR::  	call project_bool
x86IR::  	movl eax var_8
x86IR::  	movl var_8 var_7
x86IR::  	jmp ir_tag_end_10
x86IR::  	ir_tag_end_10:
x86IR::  	pushl expl_2
x86IR::  	call tag
x86IR::  	movl eax var_22
x86IR::  	cmpl $0 var_22
x86IR::  	je ir_tag11_cmp
x86IR::  	movl $0 var_21
x86IR::  	jmp ir_tag11_cmpend
x86IR::  	ir_tag11_cmp:
x86IR::  	movl $1 var_21
x86IR::  	ir_tag11_cmpend:
x86IR::  	pushl var_21
x86IR::  	call inject_bool
x86IR::  	movl eax var_20
x86IR::  	pushl var_20
x86IR::  	call tag
x86IR::  	movl eax var_25
x86IR::  	cmpl $0 var_25
x86IR::  	je ir_tag12_cmp
x86IR::  	movl $0 var_25
x86IR::  	jmp ir_tag12_cmpend
x86IR::  	ir_tag12_cmp:
x86IR::  	movl $1 var_25
x86IR::  	ir_tag12_cmpend:
x86IR::  	cmpl $0 var_25
x86IR::  	je ir_tag_else_13
x86IR::  	pushl var_20
x86IR::  	call project_int
x86IR::  	movl eax var_20
x86IR::  	jmp ir_tag_end_13
x86IR::  	ir_tag_else_13:
x86IR::  	pushl var_20
x86IR::  	call project_bool
x86IR::  	movl eax var_20
x86IR::  	jmp ir_tag_end_13
x86IR::  	ir_tag_end_13:
x86IR::  	cmpl $0 var_20
x86IR::  	je ir_tag_else_14
x86IR::  	pushl expl_2
x86IR::  	call project_int
x86IR::  	movl eax var_17
x86IR::  	movl var_17 var_17
x86IR::  	jmp ir_tag_end_14
x86IR::  	ir_tag_else_14:
x86IR::  	pushl expl_2
x86IR::  	call project_bool
x86IR::  	movl eax var_18
x86IR::  	movl var_18 var_17
x86IR::  	jmp ir_tag_end_14
x86IR::  	ir_tag_end_14:
x86IR::  	movl var_7 var_6
x86IR::  	addl var_17 var_6
x86IR::  	pushl var_6
x86IR::  	call inject_int
x86IR::  	movl eax var_5
x86IR::  	movl var_5 expl_0
x86IR::  	movl expl_0 var_5
x86IR::  	jmp ir_tag_end_6
x86IR::  	ir_tag_else_6:
x86IR::  	pushl expl_1
x86IR::  	call tag
x86IR::  	movl eax var_39
x86IR::  	cmpl $3 var_39
x86IR::  	je ir_tag15_cmp
x86IR::  	movl $0 var_38
x86IR::  	jmp ir_tag15_cmpend
x86IR::  	ir_tag15_cmp:
x86IR::  	movl $1 var_38
x86IR::  	ir_tag15_cmpend:
x86IR::  	pushl expl_2
x86IR::  	call tag
x86IR::  	movl eax var_42
x86IR::  	cmpl $3 var_42
x86IR::  	je ir_tag16_cmp
x86IR::  	movl $0 var_41
x86IR::  	jmp ir_tag16_cmpend
x86IR::  	ir_tag16_cmp:
x86IR::  	movl $1 var_41
x86IR::  	ir_tag16_cmpend:
x86IR::  	movl var_38 var_37
x86IR::  	andl var_41 var_37
x86IR::  	pushl var_37
x86IR::  	call inject_bool
x86IR::  	movl eax var_36
x86IR::  	pushl var_36
x86IR::  	call tag
x86IR::  	movl eax var_46
x86IR::  	cmpl $0 var_46
x86IR::  	je ir_tag17_cmp
x86IR::  	movl $0 var_46
x86IR::  	jmp ir_tag17_cmpend
x86IR::  	ir_tag17_cmp:
x86IR::  	movl $1 var_46
x86IR::  	ir_tag17_cmpend:
x86IR::  	cmpl $0 var_46
x86IR::  	je ir_tag_else_18
x86IR::  	pushl var_36
x86IR::  	call project_int
x86IR::  	movl eax var_36
x86IR::  	jmp ir_tag_end_18
x86IR::  	ir_tag_else_18:
x86IR::  	pushl var_36
x86IR::  	call project_bool
x86IR::  	movl eax var_36
x86IR::  	jmp ir_tag_end_18
x86IR::  	ir_tag_end_18:
x86IR::  	cmpl $0 var_36
x86IR::  	je ir_tag_else_19
x86IR::  	pushl expl_1
x86IR::  	call project_big
x86IR::  	movl eax var_30
x86IR::  	pushl expl_2
x86IR::  	call project_big
x86IR::  	movl eax var_32
x86IR::  	pushl var_32
x86IR::  	pushl var_30
x86IR::  	call add
x86IR::  	movl eax var_29
x86IR::  	pushl var_29
x86IR::  	call inject_big
x86IR::  	movl eax var_28
x86IR::  	movl var_28 expl_0
x86IR::  	movl expl_0 var_28
x86IR::  	movl var_28 var_5
x86IR::  	jmp ir_tag_end_19
x86IR::  	ir_tag_else_19:
x86IR::  	call call_error
x86IR::  	pushl eax
x86IR::  	call inject_int
x86IR::  	movl eax var_35
x86IR::  	movl var_35 var_28
x86IR::  	movl var_28 var_5
x86IR::  	jmp ir_tag_end_19
x86IR::  	ir_tag_end_19:
x86IR::  	jmp ir_tag_end_6
x86IR::  	ir_tag_end_6:
x86IR::  	movl expl_0 var_1
x86IR::  	movl expl_0 var_1
x86IR::  	movl var_1 user_z
VariableGraph::  # of variables: 49
